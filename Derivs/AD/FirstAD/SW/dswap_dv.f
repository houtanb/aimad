!
! Copyright (C) 2006-2014 Houtan Bastani and Luca Guerrieri
!
!
! This free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! It is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with Dynare.  If not, see <http://www.gnu.org/licenses/>.
!

C        Generated by TAPENADE     (INRIA, Tropics team)
C  Tapenade - Version 2.2 (r1239) - Wed 28 Jun 2006 04:59:55 PM CEST
C
C  Differentiation of dswap in forward (tangent) mode: (multi-directional mode)
C   variations  of output variables: dx dy
C   with respect to input variables: dx dy
      SUBROUTINE DSWAP_DV(n, dx, dxd, incx, dy, dyd, incy, nbdirs)
      USE DIFFSIZES
      IMPLICIT NONE
      INTEGER incx, incy, n
      INTEGER nbdirs
      DOUBLE PRECISION dx(*), dxd(nbdirsmax, *), dy(*), dyd(nbdirsmax, *
     +                 )
      DOUBLE PRECISION dtemp, dtempd(nbdirsmax)
      INTEGER i, ix, iy, m, mp1, nd
      INTRINSIC MOD
C     .. Scalar Arguments ..
C     ..
C     .. Array Arguments ..
C     ..
C
C  Purpose
C  =======
C
C     interchanges two vectors.
C     uses unrolled loops for increments equal one.
C     jack dongarra, linpack, 3/11/78.
C     modified 12/3/93, array(1) declarations changed to array(*)
C
C
C     .. Local Scalars ..
C     ..
C     .. Intrinsic Functions ..
C     ..
      IF (n .LE. 0) THEN
        RETURN
      ELSE IF (incx .EQ. 1 .AND. incy .EQ. 1) THEN
C
C       code for both increments equal to 1
C
C
C       clean-up loop
C
        m = MOD(n, 3)
        IF (.NOT.m .EQ. 0) THEN
          DO i=1,m
            DO nd=1,nbdirs
              dtempd(nd) = dxd(nd, i)
              dxd(nd, i) = dyd(nd, i)
              dyd(nd, i) = dtempd(nd)
            ENDDO
            dtemp = dx(i)
            dx(i) = dy(i)
            dy(i) = dtemp
          ENDDO
          IF (n .LT. 3) RETURN
        END IF
        mp1 = m + 1
        DO i=mp1,n,3
          DO nd=1,nbdirs
            dtempd(nd) = dxd(nd, i)
            dxd(nd, i) = dyd(nd, i)
            dyd(nd, i) = dtempd(nd)
            dtempd(nd) = dxd(nd, i+1)
            dxd(nd, i+1) = dyd(nd, i+1)
            dyd(nd, i+1) = dtempd(nd)
            dtempd(nd) = dxd(nd, i+2)
            dxd(nd, i+2) = dyd(nd, i+2)
            dyd(nd, i+2) = dtempd(nd)
          ENDDO
          dtemp = dx(i)
          dx(i) = dy(i)
          dy(i) = dtemp
          dtemp = dx(i+1)
          dx(i+1) = dy(i+1)
          dy(i+1) = dtemp
          dtemp = dx(i+2)
          dx(i+2) = dy(i+2)
          dy(i+2) = dtemp
        ENDDO
        RETURN
      ELSE
C
C       code for unequal increments or equal increments not equal
C         to 1
C
        ix = 1
        iy = 1
        IF (incx .LT. 0) ix = (-n+1)*incx + 1
        IF (incy .LT. 0) iy = (-n+1)*incy + 1
        DO i=1,n
          DO nd=1,nbdirs
            dtempd(nd) = dxd(nd, ix)
            dxd(nd, ix) = dyd(nd, iy)
            dyd(nd, iy) = dtempd(nd)
          ENDDO
          dtemp = dx(ix)
          dx(ix) = dy(iy)
          dy(iy) = dtemp
          ix = ix + incx
          iy = iy + incy
        ENDDO
        RETURN
      END IF
      END
