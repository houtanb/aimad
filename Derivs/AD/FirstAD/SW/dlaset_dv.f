!
! Copyright (C) 2006-2014 Houtan Bastani and Luca Guerrieri
!
!
! This free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! It is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with Dynare.  If not, see <http://www.gnu.org/licenses/>.
!

C        Generated by TAPENADE     (INRIA, Tropics team)
C  Tapenade - Version 2.2 (r1239) - Wed 28 Jun 2006 04:59:55 PM CEST
C
C  Differentiation of dlaset in forward (tangent) mode: (multi-directional mode)
C   variations  of output variables: a
C   with respect to input variables: a
      SUBROUTINE DLASET_DV(uplo, m, n, alpha, beta, a, ad, lda, nbdirs)
      USE DIFFSIZES
      IMPLICIT NONE
C
C     End of DLASET
C
      DOUBLE PRECISION alpha, beta
      INTEGER lda, nbdirs
      DOUBLE PRECISION a(lda, *), ad(nbdirsmax, lda, *)
      INTEGER m, n
      CHARACTER uplo
      INTEGER i, j, min1, min2, min3, nd
      LOGICAL LSAME, result1
      EXTERNAL LSAME
      INTRINSIC MIN
C
C  -- LAPACK auxiliary routine (version 3.1) --
C     Univ. of Tennessee, Univ. of California Berkeley and NAG Ltd..
C     November 2006
C
C     .. Scalar Arguments ..
C     ..
C     .. Array Arguments ..
C     ..
C
C  Purpose
C  =======
C
C  DLASET initializes an m-by-n matrix A to BETA on the diagonal and
C  ALPHA on the offdiagonals.
C
C  Arguments
C  =========
C
C  UPLO    (input) CHARACTER*1
C          Specifies the part of the matrix A to be set.
C          = 'U':      Upper triangular part is set; the strictly lower
C                      triangular part of A is not changed.
C          = 'L':      Lower triangular part is set; the strictly upper
C                      triangular part of A is not changed.
C          Otherwise:  All of the matrix A is set.
C
C  M       (input) INTEGER
C          The number of rows of the matrix A.  M >= 0.
C
C  N       (input) INTEGER
C          The number of columns of the matrix A.  N >= 0.
C
C  ALPHA   (input) DOUBLE PRECISION
C          The constant to which the offdiagonal elements are to be set.
C
C  BETA    (input) DOUBLE PRECISION
C          The constant to which the diagonal elements are to be set.
C
C  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)
C          On exit, the leading m-by-n submatrix of A is set as follows:
C
C          if UPLO = 'U', A(i,j) = ALPHA, 1<=i<=j-1, 1<=j<=n,
C          if UPLO = 'L', A(i,j) = ALPHA, j+1<=i<=m, 1<=j<=n,
C          otherwise,     A(i,j) = ALPHA, 1<=i<=m, 1<=j<=n, i.ne.j,
C
C          and, for all UPLO, A(i,i) = BETA, 1<=i<=min(m,n).
C
C  LDA     (input) INTEGER
C          The leading dimension of the array A.  LDA >= max(1,M).
C
C =====================================================================
C
C     .. Local Scalars ..
C     ..
C     .. External Functions ..
C     ..
C     .. Intrinsic Functions ..
C     ..
C     .. Executable Statements ..
C
      result1 = LSAME(uplo, 'U')
      IF (result1) THEN
C
C        Set the strictly upper triangular or trapezoidal part of the
C        array to ALPHA.
C
        DO j=2,n
          IF (j - 1 .GT. m) THEN
            min1 = m
          ELSE
            min1 = j - 1
          END IF
          DO i=1,min1
            DO nd=1,nbdirs
              ad(nd, i, j) = 0.D0
            ENDDO
            a(i, j) = alpha
          ENDDO
        ENDDO
      ELSE
C
        result1 = LSAME(uplo, 'L')
        IF (result1) THEN
          IF (m .GT. n) THEN
            min2 = n
          ELSE
            min2 = m
          END IF
C
C        Set the strictly lower triangular or trapezoidal part of the
C        array to ALPHA.
C
          DO j=1,min2
            DO i=j+1,m
              DO nd=1,nbdirs
                ad(nd, i, j) = 0.D0
              ENDDO
              a(i, j) = alpha
            ENDDO
          ENDDO
        ELSE
C
C
C        Set the leading m-by-n submatrix to ALPHA.
C
          DO j=1,n
            DO i=1,m
              DO nd=1,nbdirs
                ad(nd, i, j) = 0.D0
              ENDDO
              a(i, j) = alpha
            ENDDO
          ENDDO
        END IF
      END IF
      IF (m .GT. n) THEN
        min3 = n
      ELSE
        min3 = m
      END IF
C
C     Set the first min(M,N) diagonal elements to BETA.
C
      DO i=1,min3
        DO nd=1,nbdirs
          ad(nd, i, i) = 0.D0
        ENDDO
        a(i, i) = beta
      ENDDO
C
      RETURN
      END
