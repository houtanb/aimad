!
! Copyright (C) 2006-2014 Houtan Bastani and Luca Guerrieri
!
!
! This free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! It is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with Dynare.  If not, see <http://www.gnu.org/licenses/>.
!

C        Generated by TAPENADE     (INRIA, Tropics team)
C  Tapenade - Version 2.2 (r1239) - Wed 28 Jun 2006 04:59:55 PM CEST
C
C  Differentiation of dtrmv in forward (tangent) mode: (multi-directional mode)
C   variations  of output variables: x
C   with respect to input variables: x a
      SUBROUTINE DTRMV_DV(uplo, trans, diag, n, a, ad, lda, x, xd, incx
     +                    , nbdirs)
      USE DIFFSIZES
      IMPLICIT NONE
C
C     End of DTRMV .
C
      INTEGER incx, n
      INTEGER lda, nbdirs
      DOUBLE PRECISION a(lda, *), ad(nbdirsmax, lda, *), x(*), xd(
     +                 nbdirsmax, *)
      CHARACTER diag, trans, uplo
      DOUBLE PRECISION zero
      PARAMETER (zero=0.0d+0)
      INTEGER i, info, ix, j, jx, kx, max1, nd
      LOGICAL LSAME, nounit, result1, result2, result3
      DOUBLE PRECISION temp, tempd(nbdirsmax)
      INTRINSIC MAX
      EXTERNAL XERBLA, LSAME
C     .. Scalar Arguments ..
C     ..
C     .. Array Arguments ..
C     ..
C
C  Purpose
C  =======
C
C  DTRMV  performs one of the matrix-vector operations
C
C     x := A*x,   or   x := A'*x,
C
C  where x is an n element vector and  A is an n by n unit, or non-unit,
C  upper or lower triangular matrix.
C
C  Arguments
C  ==========
C
C  UPLO   - CHARACTER*1.
C           On entry, UPLO specifies whether the matrix is an upper or
C           lower triangular matrix as follows:
C
C              UPLO = 'U' or 'u'   A is an upper triangular matrix.
C
C              UPLO = 'L' or 'l'   A is a lower triangular matrix.
C
C           Unchanged on exit.
C
C  TRANS  - CHARACTER*1.
C           On entry, TRANS specifies the operation to be performed as
C           follows:
C
C              TRANS = 'N' or 'n'   x := A*x.
C
C              TRANS = 'T' or 't'   x := A'*x.
C
C              TRANS = 'C' or 'c'   x := A'*x.
C
C           Unchanged on exit.
C
C  DIAG   - CHARACTER*1.
C           On entry, DIAG specifies whether or not A is unit
C           triangular as follows:
C
C              DIAG = 'U' or 'u'   A is assumed to be unit triangular.
C
C              DIAG = 'N' or 'n'   A is not assumed to be unit
C                                  triangular.
C
C           Unchanged on exit.
C
C  N      - INTEGER.
C           On entry, N specifies the order of the matrix A.
C           N must be at least zero.
C           Unchanged on exit.
C
C  A      - DOUBLE PRECISION array of DIMENSION ( LDA, n ).
C           Before entry with  UPLO = 'U' or 'u', the leading n by n
C           upper triangular part of the array A must contain the upper
C           triangular matrix and the strictly lower triangular part of
C           A is not referenced.
C           Before entry with UPLO = 'L' or 'l', the leading n by n
C           lower triangular part of the array A must contain the lower
C           triangular matrix and the strictly upper triangular part of
C           A is not referenced.
C           Note that when  DIAG = 'U' or 'u', the diagonal elements of
C           A are not referenced either, but are assumed to be unity.
C           Unchanged on exit.
C
C  LDA    - INTEGER.
C           On entry, LDA specifies the first dimension of A as declared
C           in the calling (sub) program. LDA must be at least
C           max( 1, n ).
C           Unchanged on exit.
C
C  X      - DOUBLE PRECISION array of dimension at least
C           ( 1 + ( n - 1 )*abs( INCX ) ).
C           Before entry, the incremented array X must contain the n
C           element vector x. On exit, X is overwritten with the
C           tranformed vector x.
C
C  INCX   - INTEGER.
C           On entry, INCX specifies the increment for the elements of
C           X. INCX must not be zero.
C           Unchanged on exit.
C
C
C  Level 2 Blas routine.
C
C  -- Written on 22-October-1986.
C     Jack Dongarra, Argonne National Lab.
C     Jeremy Du Croz, Nag Central Office.
C     Sven Hammarling, Nag Central Office.
C     Richard Hanson, Sandia National Labs.
C
C
C     .. Parameters ..
C     ..
C     .. Local Scalars ..
C     ..
C     .. External Functions ..
C     ..
C     .. External Subroutines ..
C     ..
C     .. Intrinsic Functions ..
C     ..
C
C     Test the input parameters.
C
      info = 0
      result1 = LSAME(uplo, 'U')
      result2 = LSAME(uplo, 'L')
      IF (.NOT.result1 .AND. (.NOT.result2)) THEN
        info = 1
      ELSE
        result1 = LSAME(trans, 'N')
        result2 = LSAME(trans, 'T')
        result3 = LSAME(trans, 'C')
        IF (.NOT.result1 .AND. (.NOT.result2) .AND. (.NOT.result3)) THEN
          info = 2
        ELSE
          result1 = LSAME(diag, 'U')
          result2 = LSAME(diag, 'N')
          IF (.NOT.result1 .AND. (.NOT.result2)) THEN
            info = 3
          ELSE IF (n .LT. 0) THEN
            info = 4
          ELSE
            IF (1 .LT. n) THEN
              max1 = n
            ELSE
              max1 = 1
            END IF
            IF (lda .LT. max1) THEN
              info = 6
            ELSE IF (incx .EQ. 0) THEN
              info = 8
            END IF
          END IF
        END IF
      END IF
      IF (info .NE. 0) THEN
        CALL XERBLA('DTRMV ', info)
        RETURN
      ELSE IF (n .EQ. 0) THEN
C
C     Quick return if possible.
C
        RETURN
      ELSE
C
        nounit = LSAME(diag, 'N')
C
C     Set up the start point in X if the increment is not unity. This
C     will be  ( N - 1 )*INCX  too small for descending loops.
C
        IF (incx .LE. 0) THEN
          kx = 1 - (n-1)*incx
        ELSE IF (incx .NE. 1) THEN
          kx = 1
        END IF
C
C     Start the operations. In this version the elements of A are
C     accessed sequentially with one pass through A.
C
        result1 = LSAME(trans, 'N')
        IF (result1) THEN
C
C        Form  x := A*x.
C
          result1 = LSAME(uplo, 'U')
          IF (result1) THEN
            IF (incx .EQ. 1) THEN
              DO j=1,n
                IF (x(j) .NE. zero) THEN
                  DO nd=1,nbdirs
                    tempd(nd) = xd(nd, j)
                  ENDDO
                  temp = x(j)
                  DO i=1,j-1
                    DO nd=1,nbdirs
                      xd(nd, i) = xd(nd, i) + tempd(nd)*a(i, j) + temp*
     +                  ad(nd, i, j)
                    ENDDO
                    x(i) = x(i) + temp*a(i, j)
                  ENDDO
                  IF (nounit) THEN
                    DO nd=1,nbdirs
                      xd(nd, j) = xd(nd, j)*a(j, j) + x(j)*ad(nd, j, j)
                    ENDDO
                    x(j) = x(j)*a(j, j)
                  END IF
                END IF
              ENDDO
            ELSE
              jx = kx
              DO j=1,n
                IF (x(jx) .NE. zero) THEN
                  DO nd=1,nbdirs
                    tempd(nd) = xd(nd, jx)
                  ENDDO
                  temp = x(jx)
                  ix = kx
                  DO i=1,j-1
                    DO nd=1,nbdirs
                      xd(nd, ix) = xd(nd, ix) + tempd(nd)*a(i, j) + temp
     +                  *ad(nd, i, j)
                    ENDDO
                    x(ix) = x(ix) + temp*a(i, j)
                    ix = ix + incx
                  ENDDO
                  IF (nounit) THEN
                    DO nd=1,nbdirs
                      xd(nd, jx) = xd(nd, jx)*a(j, j) + x(jx)*ad(nd, j,
     +                  j)
                    ENDDO
                    x(jx) = x(jx)*a(j, j)
                  END IF
                END IF
                jx = jx + incx
              ENDDO
            END IF
          ELSE IF (incx .EQ. 1) THEN
            DO j=n,1,-1
              IF (x(j) .NE. zero) THEN
                DO nd=1,nbdirs
                  tempd(nd) = xd(nd, j)
                ENDDO
                temp = x(j)
                DO i=n,j+1,-1
                  DO nd=1,nbdirs
                    xd(nd, i) = xd(nd, i) + tempd(nd)*a(i, j) + temp*ad(
     +                nd, i, j)
                  ENDDO
                  x(i) = x(i) + temp*a(i, j)
                ENDDO
                IF (nounit) THEN
                  DO nd=1,nbdirs
                    xd(nd, j) = xd(nd, j)*a(j, j) + x(j)*ad(nd, j, j)
                  ENDDO
                  x(j) = x(j)*a(j, j)
                END IF
              END IF
            ENDDO
          ELSE
            kx = kx + (n-1)*incx
            jx = kx
            DO j=n,1,-1
              IF (x(jx) .NE. zero) THEN
                DO nd=1,nbdirs
                  tempd(nd) = xd(nd, jx)
                ENDDO
                temp = x(jx)
                ix = kx
                DO i=n,j+1,-1
                  DO nd=1,nbdirs
                    xd(nd, ix) = xd(nd, ix) + tempd(nd)*a(i, j) + temp*
     +                ad(nd, i, j)
                  ENDDO
                  x(ix) = x(ix) + temp*a(i, j)
                  ix = ix - incx
                ENDDO
                IF (nounit) THEN
                  DO nd=1,nbdirs
                    xd(nd, jx) = xd(nd, jx)*a(j, j) + x(jx)*ad(nd, j, j)
                  ENDDO
                  x(jx) = x(jx)*a(j, j)
                END IF
              END IF
              jx = jx - incx
            ENDDO
          END IF
        ELSE
C
C        Form  x := A'*x.
C
          result1 = LSAME(uplo, 'U')
          IF (result1) THEN
            IF (incx .EQ. 1) THEN
              DO j=n,1,-1
                DO nd=1,nbdirs
                  tempd(nd) = xd(nd, j)
                ENDDO
                temp = x(j)
                IF (nounit) THEN
                  DO nd=1,nbdirs
                    tempd(nd) = tempd(nd)*a(j, j) + temp*ad(nd, j, j)
                  ENDDO
                  temp = temp*a(j, j)
                END IF
                DO i=j-1,1,-1
                  DO nd=1,nbdirs
                    tempd(nd) = tempd(nd) + ad(nd, i, j)*x(i) + a(i, j)*
     +                xd(nd, i)
                  ENDDO
                  temp = temp + a(i, j)*x(i)
                ENDDO
                DO nd=1,nbdirs
                  xd(nd, j) = tempd(nd)
                ENDDO
                x(j) = temp
              ENDDO
            ELSE
              jx = kx + (n-1)*incx
              DO j=n,1,-1
                DO nd=1,nbdirs
                  tempd(nd) = xd(nd, jx)
                ENDDO
                temp = x(jx)
                ix = jx
                IF (nounit) THEN
                  DO nd=1,nbdirs
                    tempd(nd) = tempd(nd)*a(j, j) + temp*ad(nd, j, j)
                  ENDDO
                  temp = temp*a(j, j)
                END IF
                DO i=j-1,1,-1
                  ix = ix - incx
                  DO nd=1,nbdirs
                    tempd(nd) = tempd(nd) + ad(nd, i, j)*x(ix) + a(i, j)
     +                *xd(nd, ix)
                  ENDDO
                  temp = temp + a(i, j)*x(ix)
                ENDDO
                DO nd=1,nbdirs
                  xd(nd, jx) = tempd(nd)
                ENDDO
                x(jx) = temp
                jx = jx - incx
              ENDDO
            END IF
          ELSE IF (incx .EQ. 1) THEN
            DO j=1,n
              DO nd=1,nbdirs
                tempd(nd) = xd(nd, j)
              ENDDO
              temp = x(j)
              IF (nounit) THEN
                DO nd=1,nbdirs
                  tempd(nd) = tempd(nd)*a(j, j) + temp*ad(nd, j, j)
                ENDDO
                temp = temp*a(j, j)
              END IF
              DO i=j+1,n
                DO nd=1,nbdirs
                  tempd(nd) = tempd(nd) + ad(nd, i, j)*x(i) + a(i, j)*xd
     +              (nd, i)
                ENDDO
                temp = temp + a(i, j)*x(i)
              ENDDO
              DO nd=1,nbdirs
                xd(nd, j) = tempd(nd)
              ENDDO
              x(j) = temp
            ENDDO
          ELSE
            jx = kx
            DO j=1,n
              DO nd=1,nbdirs
                tempd(nd) = xd(nd, jx)
              ENDDO
              temp = x(jx)
              ix = jx
              IF (nounit) THEN
                DO nd=1,nbdirs
                  tempd(nd) = tempd(nd)*a(j, j) + temp*ad(nd, j, j)
                ENDDO
                temp = temp*a(j, j)
              END IF
              DO i=j+1,n
                ix = ix + incx
                DO nd=1,nbdirs
                  tempd(nd) = tempd(nd) + ad(nd, i, j)*x(ix) + a(i, j)*
     +              xd(nd, ix)
                ENDDO
                temp = temp + a(i, j)*x(ix)
              ENDDO
              DO nd=1,nbdirs
                xd(nd, jx) = tempd(nd)
              ENDDO
              x(jx) = temp
              jx = jx + incx
            ENDDO
          END IF
        END IF
C
        RETURN
      END IF
      END
