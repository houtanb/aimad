!
! Copyright (C) 2006-2014 Houtan Bastani and Luca Guerrieri
!
!
! This free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! It is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with Dynare.  If not, see <http://www.gnu.org/licenses/>.
!

C        Generated by TAPENADE     (INRIA, Tropics team)
C  Tapenade - Version 2.2 (r1239) - Wed 28 Jun 2006 04:59:55 PM CEST
C
C  Differentiation of dgesv in forward (tangent) mode: (multi-directional mode)
C   variations  of output variables: a b
C   with respect to input variables: a b
      SUBROUTINE DGESV_DV(n, nrhs, a, ad, lda, ipiv, b, bd, ldb, info,
     +                    nbdirs)
      USE DIFFSIZES
      IMPLICIT NONE
C
C     End of DGESV
C
      INTEGER info, ipiv(*), n, nrhs
      INTEGER lda, ldb, nbdirs
      DOUBLE PRECISION a(lda, *), ad(nbdirsmax, lda, *), b(ldb, *), bd(
     +                 nbdirsmax, ldb, *)
      INTEGER arg1, max1, max2
      INTRINSIC MAX
      EXTERNAL XERBLA
C
C  -- LAPACK driver routine (version 3.1) --
C     Univ. of Tennessee, Univ. of California Berkeley and NAG Ltd..
C     November 2006
C
C     .. Scalar Arguments ..
C     ..
C     .. Array Arguments ..
C     ..
C
C  Purpose
C  =======
C
C  DGESV computes the solution to a real system of linear equations
C     A * X = B,
C  where A is an N-by-N matrix and X and B are N-by-NRHS matrices.
C
C  The LU decomposition with partial pivoting and row interchanges is
C  used to factor A as
C     A = P * L * U,
C  where P is a permutation matrix, L is unit lower triangular, and U is
C  upper triangular.  The factored form of A is then used to solve the
C  system of equations A * X = B.
C
C  Arguments
C  =========
C
C  N       (input) INTEGER
C          The number of linear equations, i.e., the order of the
C          matrix A.  N >= 0.
C
C  NRHS    (input) INTEGER
C          The number of right hand sides, i.e., the number of columns
C          of the matrix B.  NRHS >= 0.
C
C  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)
C          On entry, the N-by-N coefficient matrix A.
C          On exit, the factors L and U from the factorization
C          A = P*L*U; the unit diagonal elements of L are not stored.
C
C  LDA     (input) INTEGER
C          The leading dimension of the array A.  LDA >= max(1,N).
C
C  IPIV    (output) INTEGER array, dimension (N)
C          The pivot indices that define the permutation matrix P;
C          row i of the matrix was interchanged with row IPIV(i).
C
C  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)
C          On entry, the N-by-NRHS matrix of right hand side matrix B.
C          On exit, if INFO = 0, the N-by-NRHS solution matrix X.
C
C  LDB     (input) INTEGER
C          The leading dimension of the array B.  LDB >= max(1,N).
C
C  INFO    (output) INTEGER
C          = 0:  successful exit
C          < 0:  if INFO = -i, the i-th argument had an illegal value
C          > 0:  if INFO = i, U(i,i) is exactly zero.  The factorization
C                has been completed, but the factor U is exactly
C                singular, so the solution could not be computed.
C
C  =====================================================================
C
C     .. External Subroutines ..
C     ..
C     .. Intrinsic Functions ..
C     ..
C     .. Executable Statements ..
C
C     Test the input parameters.
C
      info = 0
      IF (n .LT. 0) THEN
        info = -1
      ELSE IF (nrhs .LT. 0) THEN
        info = -2
      ELSE
        IF (1 .LT. n) THEN
          max1 = n
        ELSE
          max1 = 1
        END IF
        IF (lda .LT. max1) THEN
          info = -4
        ELSE
          IF (1 .LT. n) THEN
            max2 = n
          ELSE
            max2 = 1
          END IF
          IF (ldb .LT. max2) info = -7
        END IF
      END IF
      IF (info .NE. 0) THEN
        arg1 = -info
        CALL XERBLA('DGESV ', arg1)
        RETURN
      ELSE
C
C     Compute the LU factorization of A.
C
        CALL DGETRF_DV(n, n, a, ad, lda, ipiv, info, nbdirs)
        IF (info .EQ. 0) CALL DGETRS_DV('No transpose', n, nrhs, a, ad,
     +                                  lda, ipiv, b, bd, ldb, info,
     +                                  nbdirs)
C
C        Solve the system A*X = B, overwriting B with X.
C
        RETURN
      END IF
      END
