!
! Copyright (C) 2006-2014 Houtan Bastani and Luca Guerrieri
!
!
! This free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! It is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with Dynare.  If not, see <http://www.gnu.org/licenses/>.
!

C        Generated by TAPENADE     (INRIA, Tropics team)
C  Tapenade - Version 2.2 (r1239) - Wed 28 Jun 2006 04:59:55 PM CEST
C
C  Differentiation of dtrsyl in forward (tangent) mode: (multi-directional mode)
C   variations  of output variables: c
C   with respect to input variables: a b c
      SUBROUTINE DTRSYL_DV(trana, tranb, isgn, m, n, a, ad, lda, b, bd,
     +                     ldb, c, cd, ldc, scale, info, nbdirs)
      USE DIFFSIZES
      IMPLICIT NONE
C
C     End of DTRSYL
C
      INTEGER info, isgn, m, n
      INTEGER lda, ldb, ldc, nbdirs
      DOUBLE PRECISION a(lda, *), ad(nbdirsmax, lda, *), b(ldb, *), bd(
     +                 nbdirsmax, ldb, *), c(ldc, *), cd(nbdirsmax, ldc
     +                 , *)
      DOUBLE PRECISION scale
      CHARACTER trana, tranb
      DOUBLE PRECISION one, zero
      PARAMETER (one=1.0d+0, zero=0.0d+0)
      DOUBLE PRECISION a11, a11d(nbdirsmax), arg10, arg10d(nbdirsmax),
     +                 bignum, da11, db, dbd(nbdirsmax), eps, scaloc,
     +                 scalocd(nbdirsmax), sgn, smin, smind(nbdirsmax),
     +                 smlnum, suml, sumld(nbdirsmax), sumr, sumrd(
     +                 nbdirsmax), xnorm, y1, y1d(nbdirsmax), z1, z1d(
     +                 nbdirsmax)
      DOUBLE PRECISION DDOT
      DOUBLE PRECISION DLAMCH
      INTEGER arg1, ierr, ii1, ii2, j, k, k1, k2, knext, l, l1, l2,
     +        lnext, max1, max2, max3, min1, min10, min11, min12, min13
     +        , min14, min15, min16, min17, min18, min19, min2, min20,
     +        min21, min22, min23, min24, min25, min26, min27, min28,
     +        min29, min3, min30, min31, min32, min33, min34, min35,
     +        min36, min37, min38, min39, min4, min40, min41, min42,
     +        min43, min44, min45, min46, min47, min48, min49, min5,
     +        min50, min51, min52, min53, min54, min55, min56, min57,
     +        min58, min59, min6, min60, min61, min62, min63, min64,
     +        min65
      INTEGER min66, min67, min68, min69, min7, min70, min71, min72,
     +        min8, min9, nd
      DOUBLE PRECISION DLANGE, result10, result10d(nbdirsmax)
      LOGICAL LSAME, notrna, notrnb, result1, result2
      DOUBLE PRECISION dum(1), dumd(nbdirsmax, 1), vec(2, 2), vecd(
     +                 nbdirsmax, 2, 2), x(2, 2), xd(nbdirsmax, 2, 2)
      EXTERNAL DLABAD, XERBLA, LSAME, DLAMCH
      INTRINSIC MAX, ABS, DBLE, MIN
C
C  -- LAPACK routine (version 3.1) --
C     Univ. of Tennessee, Univ. of California Berkeley and NAG Ltd..
C     November 2006
C
C     .. Scalar Arguments ..
C     ..
C     .. Array Arguments ..
C     ..
C
C  Purpose
C  =======
C
C  DTRSYL solves the real Sylvester matrix equation:
C
C     op(A)*X + X*op(B) = scale*C or
C     op(A)*X - X*op(B) = scale*C,
C
C  where op(A) = A or A**T, and  A and B are both upper quasi-
C  triangular. A is M-by-M and B is N-by-N; the right hand side C and
C  the solution X are M-by-N; and scale is an output scale factor, set
C  <= 1 to avoid overflow in X.
C
C  A and B must be in Schur canonical form (as returned by DHSEQR), that
C  is, block upper triangular with 1-by-1 and 2-by-2 diagonal blocks;
C  each 2-by-2 diagonal block has its diagonal elements equal and its
C  off-diagonal elements of opposite sign.
C
C  Arguments
C  =========
C
C  TRANA   (input) CHARACTER*1
C          Specifies the option op(A):
C          = 'N': op(A) = A    (No transpose)
C          = 'T': op(A) = A**T (Transpose)
C          = 'C': op(A) = A**H (Conjugate transpose = Transpose)
C
C  TRANB   (input) CHARACTER*1
C          Specifies the option op(B):
C          = 'N': op(B) = B    (No transpose)
C          = 'T': op(B) = B**T (Transpose)
C          = 'C': op(B) = B**H (Conjugate transpose = Transpose)
C
C  ISGN    (input) INTEGER
C          Specifies the sign in the equation:
C          = +1: solve op(A)*X + X*op(B) = scale*C
C          = -1: solve op(A)*X - X*op(B) = scale*C
C
C  M       (input) INTEGER
C          The order of the matrix A, and the number of rows in the
C          matrices X and C. M >= 0.
C
C  N       (input) INTEGER
C          The order of the matrix B, and the number of columns in the
C          matrices X and C. N >= 0.
C
C  A       (input) DOUBLE PRECISION array, dimension (LDA,M)
C          The upper quasi-triangular matrix A, in Schur canonical form.
C
C  LDA     (input) INTEGER
C          The leading dimension of the array A. LDA >= max(1,M).
C
C  B       (input) DOUBLE PRECISION array, dimension (LDB,N)
C          The upper quasi-triangular matrix B, in Schur canonical form.
C
C  LDB     (input) INTEGER
C          The leading dimension of the array B. LDB >= max(1,N).
C
C  C       (input/output) DOUBLE PRECISION array, dimension (LDC,N)
C          On entry, the M-by-N right hand side matrix C.
C          On exit, C is overwritten by the solution matrix X.
C
C  LDC     (input) INTEGER
C          The leading dimension of the array C. LDC >= max(1,M)
C
C  SCALE   (output) DOUBLE PRECISION
C          The scale factor, scale, set <= 1 to avoid overflow in X.
C
C  INFO    (output) INTEGER
C          = 0: successful exit
C          < 0: if INFO = -i, the i-th argument had an illegal value
C          = 1: A and B have common or very close eigenvalues; perturbed
C               values were used to solve the equation (but the matrices
C               A and B are unchanged).
C
C  =====================================================================
C
C     .. Parameters ..
C     ..
C     .. Local Scalars ..
C     ..
C     .. Local Arrays ..
C     ..
C     .. External Functions ..
C     ..
C     .. External Subroutines ..
C     ..
C     .. Intrinsic Functions ..
C     ..
C     .. Executable Statements ..
C
C     Decode and Test input parameters
C
      notrna = LSAME(trana, 'N')
      notrnb = LSAME(tranb, 'N')
C
      info = 0
      result1 = LSAME(trana, 'T')
      result2 = LSAME(trana, 'C')
      IF (.NOT.notrna .AND. (.NOT.result1) .AND. (.NOT.result2)) THEN
        info = -1
      ELSE
        result1 = LSAME(tranb, 'T')
        result2 = LSAME(tranb, 'C')
        IF (.NOT.notrnb .AND. (.NOT.result1) .AND. (.NOT.result2)) THEN
          info = -2
        ELSE IF (isgn .NE. 1 .AND. isgn .NE. -1) THEN
          info = -3
        ELSE IF (m .LT. 0) THEN
          info = -4
        ELSE IF (n .LT. 0) THEN
          info = -5
        ELSE
          IF (1 .LT. m) THEN
            max1 = m
          ELSE
            max1 = 1
          END IF
          IF (lda .LT. max1) THEN
            info = -7
          ELSE
            IF (1 .LT. n) THEN
              max2 = n
            ELSE
              max2 = 1
            END IF
            IF (ldb .LT. max2) THEN
              info = -9
            ELSE
              IF (1 .LT. m) THEN
                max3 = m
              ELSE
                max3 = 1
              END IF
              IF (ldc .LT. max3) info = -11
            END IF
          END IF
        END IF
      END IF
      IF (info .NE. 0) THEN
        arg1 = -info
        CALL XERBLA('DTRSYL', arg1)
        RETURN
      ELSE IF (m .EQ. 0 .OR. n .EQ. 0) THEN
C
C     Quick return if possible
C
        RETURN
      ELSE
C
C     Set constants to control overflow
C
        eps = DLAMCH('P')
        smlnum = DLAMCH('S')
        bignum = one/smlnum
        CALL DLABAD(smlnum, bignum)
        arg1 = m*n
        smlnum = smlnum*DBLE(arg1)/eps
        bignum = one/smlnum
        DO nd=1,nbdirs
          DO ii2=1,1
            dumd(nd, ii2) = 0.D0
          ENDDO
        ENDDO
        CALL DLANGE_DV('M', m, m, a, ad, lda, dum, dumd, result10,
     +                 result10d, nbdirs)
        DO nd=1,nbdirs
          y1d(nd) = eps*result10d(nd)
        ENDDO
        y1 = eps*result10
        CALL DLANGE_DV('M', n, n, b, bd, ldb, dum, dumd, result10,
     +                 result10d, nbdirs)
        DO nd=1,nbdirs
          z1d(nd) = eps*result10d(nd)
        ENDDO
        z1 = eps*result10
        IF (smlnum .LT. y1) THEN
          IF (y1 .LT. z1) THEN
            DO nd=1,nbdirs
              smind(nd) = z1d(nd)
            ENDDO
            smin = z1
          ELSE
            DO nd=1,nbdirs
              smind(nd) = y1d(nd)
            ENDDO
            smin = y1
          END IF
        ELSE IF (smlnum .LT. z1) THEN
          DO nd=1,nbdirs
            smind(nd) = z1d(nd)
          ENDDO
          smin = z1
        ELSE
          smin = smlnum
          DO nd=1,nbdirs
            smind(nd) = 0.D0
          ENDDO
        END IF
C
        scale = one
        sgn = isgn
C
        IF (notrna .AND. notrnb) THEN
C
C        Solve    A*X + ISGN*X*B = scale*C.
C
C        The (K,L)th block of X is determined starting from
C        bottom-left corner column by column by
C
C         A(K,K)*X(K,L) + ISGN*X(K,L)*B(L,L) = C(K,L) - R(K,L)
C
C        Where
C                  M                         L-1
C        R(K,L) = SUM [A(K,I)*X(I,L)] + ISGN*SUM [X(K,J)*B(J,L)].
C                I=K+1                       J=1
C
C        Start column loop (index = L)
C        L1 (L2) : column index of the first (first) row of X(K,L).
C
          lnext = 1
          DO nd=1,nbdirs
            scalocd(nd) = 0.D0
          ENDDO
          DO ii1=1,2
            DO ii2=1,2
              DO nd=1,nbdirs
                xd(nd, ii2, ii1) = 0.D0
              ENDDO
            ENDDO
          ENDDO
          DO ii1=1,2
            DO ii2=1,2
              DO nd=1,nbdirs
                vecd(nd, ii2, ii1) = 0.D0
              ENDDO
            ENDDO
          ENDDO
          DO l=1,n
            IF (.NOT.l .LT. lnext) THEN
              IF (l .EQ. n) THEN
                l1 = l
                l2 = l
              ELSE IF (b(l+1, l) .NE. zero) THEN
                l1 = l
                l2 = l + 1
                lnext = l + 2
              ELSE
                l1 = l
                l2 = l
                lnext = l + 1
              END IF
C
C           Start row loop (index = K)
C           K1 (K2): row index of the first (last) row of X(K,L).
C
              knext = m
              DO k=m,1,-1
                IF (.NOT.k .GT. knext) THEN
                  IF (k .EQ. 1) THEN
                    k1 = k
                    k2 = k
                  ELSE IF (a(k, k-1) .NE. zero) THEN
                    k1 = k - 1
                    k2 = k
                    knext = k - 2
                  ELSE
                    k1 = k
                    k2 = k
                    knext = k - 1
                  END IF
C
                  IF (l1 .EQ. l2 .AND. k1 .EQ. k2) THEN
                    IF (k1 + 1 .GT. m) THEN
                      min1 = m
                    ELSE
                      min1 = k1 + 1
                    END IF
                    IF (k1 + 1 .GT. m) THEN
                      min37 = m
                    ELSE
                      min37 = k1 + 1
                    END IF
                    arg1 = m - k1
                    CALL DDOT_DV(arg1, a(k1, min1), ad(1, k1, min1), lda
     +                           , c(min37, l1), cd(1, min37, l1), 1,
     +                           suml, sumld, nbdirs)
                    arg1 = l1 - 1
                    CALL DDOT_DV(arg1, c(k1, 1), cd(1, k1, 1), ldc, b(1
     +                           , l1), bd(1, 1, l1), 1, sumr, sumrd,
     +                           nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 1, 1) = cd(nd, k1, l1) - sumld(nd) - sgn*
     +                  sumrd(nd)
                      a11d(nd) = ad(nd, k1, k1) + sgn*bd(nd, l1, l1)
                    ENDDO
                    vec(1, 1) = c(k1, l1) - (suml+sgn*sumr)
                    scaloc = one
C
                    a11 = a(k1, k1) + sgn*b(l1, l1)
                    IF (a11 .GE. 0.) THEN
                      da11 = a11
                    ELSE
                      da11 = -a11
                    END IF
                    IF (da11 .LE. smin) THEN
                      DO nd=1,nbdirs
                        a11d(nd) = smind(nd)
                      ENDDO
                      a11 = smin
                      da11 = smin
                      info = 1
                    END IF
                    IF (vec(1, 1) .GE. 0.) THEN
                      DO nd=1,nbdirs
                        dbd(nd) = vecd(nd, 1, 1)
                      ENDDO
                      db = vec(1, 1)
                    ELSE
                      DO nd=1,nbdirs
                        dbd(nd) = -vecd(nd, 1, 1)
                      ENDDO
                      db = -vec(1, 1)
                    END IF
                    IF (da11 .LT. one .AND. db .GT. one) THEN
                      IF (db .GT. bignum*da11) THEN
                        DO nd=1,nbdirs
                          scalocd(nd) = -(one*dbd(nd)/db**2)
                        ENDDO
                        scaloc = one/db
                      ELSE
                        DO nd=1,nbdirs
                          scalocd(nd) = 0.D0
                        ENDDO
                      END IF
                    ELSE
                      DO nd=1,nbdirs
                        scalocd(nd) = 0.D0
                      ENDDO
                    END IF
                    DO nd=1,nbdirs
                      xd(nd, 1, 1) = ((vecd(nd, 1, 1)*scaloc+vec(1, 1)*
     +                  scalocd(nd))*a11-vec(1, 1)*scaloc*a11d(nd))/a11
     +                  **2
                    ENDDO
                    x(1, 1) = vec(1, 1)*scaloc/a11
C
                    IF (scaloc .NE. one) THEN
                      DO j=1,n
                        CALL DSCAL_DV(m, scaloc, scalocd, c(1, j), cd(1
     +                                , 1, j), 1, nbdirs)
                      ENDDO
                      scale = scale*scaloc
                    END IF
                    DO nd=1,nbdirs
                      cd(nd, k1, l1) = xd(nd, 1, 1)
                    ENDDO
                    c(k1, l1) = x(1, 1)
C
                  ELSE IF (l1 .EQ. l2 .AND. k1 .NE. k2) THEN
                    IF (k2 + 1 .GT. m) THEN
                      min2 = m
                    ELSE
                      min2 = k2 + 1
                    END IF
                    IF (k2 + 1 .GT. m) THEN
                      min38 = m
                    ELSE
                      min38 = k2 + 1
                    END IF
C
                    arg1 = m - k2
                    CALL DDOT_DV(arg1, a(k1, min2), ad(1, k1, min2), lda
     +                           , c(min38, l1), cd(1, min38, l1), 1,
     +                           suml, sumld, nbdirs)
                    arg1 = l1 - 1
                    CALL DDOT_DV(arg1, c(k1, 1), cd(1, k1, 1), ldc, b(1
     +                           , l1), bd(1, 1, l1), 1, sumr, sumrd,
     +                           nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 1, 1) = cd(nd, k1, l1) - sumld(nd) - sgn*
     +                  sumrd(nd)
                    ENDDO
                    vec(1, 1) = c(k1, l1) - (suml+sgn*sumr)
                    IF (k2 + 1 .GT. m) THEN
                      min3 = m
                    ELSE
                      min3 = k2 + 1
                    END IF
                    IF (k2 + 1 .GT. m) THEN
                      min39 = m
                    ELSE
                      min39 = k2 + 1
                    END IF
C
                    arg1 = m - k2
                    CALL DDOT_DV(arg1, a(k2, min3), ad(1, k2, min3), lda
     +                           , c(min39, l1), cd(1, min39, l1), 1,
     +                           suml, sumld, nbdirs)
                    arg1 = l1 - 1
                    CALL DDOT_DV(arg1, c(k2, 1), cd(1, k2, 1), ldc, b(1
     +                           , l1), bd(1, 1, l1), 1, sumr, sumrd,
     +                           nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 2, 1) = cd(nd, k2, l1) - sumld(nd) - sgn*
     +                  sumrd(nd)
                      arg10d(nd) = -(sgn*bd(nd, l1, l1))
                    ENDDO
                    vec(2, 1) = c(k2, l1) - (suml+sgn*sumr)
C
                    arg10 = -(sgn*b(l1, l1))
                    CALL DLALN2_DV(.false., 2, 1, smin, smind, one, a(k1
     +                             , k1), ad(1, k1, k1), lda, one, one,
     +                             vec, vecd, 2, arg10, arg10d, zero, x
     +                             , xd, 2, scaloc, scalocd, xnorm, ierr
     +                             , nbdirs)
                    IF (ierr .NE. 0) info = 1
C
                    IF (scaloc .NE. one) THEN
                      DO j=1,n
                        CALL DSCAL_DV(m, scaloc, scalocd, c(1, j), cd(1
     +                                , 1, j), 1, nbdirs)
                      ENDDO
                      scale = scale*scaloc
                    END IF
                    DO nd=1,nbdirs
                      cd(nd, k1, l1) = xd(nd, 1, 1)
                      cd(nd, k2, l1) = xd(nd, 2, 1)
                    ENDDO
                    c(k1, l1) = x(1, 1)
                    c(k2, l1) = x(2, 1)
C
                  ELSE IF (l1 .NE. l2 .AND. k1 .EQ. k2) THEN
                    IF (k1 + 1 .GT. m) THEN
                      min4 = m
                    ELSE
                      min4 = k1 + 1
                    END IF
                    IF (k1 + 1 .GT. m) THEN
                      min40 = m
                    ELSE
                      min40 = k1 + 1
                    END IF
C
                    arg1 = m - k1
                    CALL DDOT_DV(arg1, a(k1, min4), ad(1, k1, min4), lda
     +                           , c(min40, l1), cd(1, min40, l1), 1,
     +                           suml, sumld, nbdirs)
                    arg1 = l1 - 1
                    CALL DDOT_DV(arg1, c(k1, 1), cd(1, k1, 1), ldc, b(1
     +                           , l1), bd(1, 1, l1), 1, sumr, sumrd,
     +                           nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 1, 1) = sgn*(cd(nd, k1, l1)-sumld(nd)-sgn
     +                  *sumrd(nd))
                    ENDDO
                    vec(1, 1) = sgn*(c(k1, l1)-(suml+sgn*sumr))
                    IF (k1 + 1 .GT. m) THEN
                      min5 = m
                    ELSE
                      min5 = k1 + 1
                    END IF
                    IF (k1 + 1 .GT. m) THEN
                      min41 = m
                    ELSE
                      min41 = k1 + 1
                    END IF
C
                    arg1 = m - k1
                    CALL DDOT_DV(arg1, a(k1, min5), ad(1, k1, min5), lda
     +                           , c(min41, l2), cd(1, min41, l2), 1,
     +                           suml, sumld, nbdirs)
                    arg1 = l1 - 1
                    CALL DDOT_DV(arg1, c(k1, 1), cd(1, k1, 1), ldc, b(1
     +                           , l2), bd(1, 1, l2), 1, sumr, sumrd,
     +                           nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 2, 1) = sgn*(cd(nd, k1, l2)-sumld(nd)-sgn
     +                  *sumrd(nd))
                      arg10d(nd) = -(sgn*ad(nd, k1, k1))
                    ENDDO
                    vec(2, 1) = sgn*(c(k1, l2)-(suml+sgn*sumr))
C
                    arg10 = -(sgn*a(k1, k1))
                    CALL DLALN2_DV(.true., 2, 1, smin, smind, one, b(l1
     +                             , l1), bd(1, l1, l1), ldb, one, one,
     +                             vec, vecd, 2, arg10, arg10d, zero, x
     +                             , xd, 2, scaloc, scalocd, xnorm, ierr
     +                             , nbdirs)
                    IF (ierr .NE. 0) info = 1
C
                    IF (scaloc .NE. one) THEN
                      DO j=1,n
                        CALL DSCAL_DV(m, scaloc, scalocd, c(1, j), cd(1
     +                                , 1, j), 1, nbdirs)
                      ENDDO
                      scale = scale*scaloc
                    END IF
                    DO nd=1,nbdirs
                      cd(nd, k1, l1) = xd(nd, 1, 1)
                      cd(nd, k1, l2) = xd(nd, 2, 1)
                    ENDDO
                    c(k1, l1) = x(1, 1)
                    c(k1, l2) = x(2, 1)
C
                  ELSE IF (l1 .NE. l2 .AND. k1 .NE. k2) THEN
                    IF (k2 + 1 .GT. m) THEN
                      min6 = m
                    ELSE
                      min6 = k2 + 1
                    END IF
                    IF (k2 + 1 .GT. m) THEN
                      min42 = m
                    ELSE
                      min42 = k2 + 1
                    END IF
C
                    arg1 = m - k2
                    CALL DDOT_DV(arg1, a(k1, min6), ad(1, k1, min6), lda
     +                           , c(min42, l1), cd(1, min42, l1), 1,
     +                           suml, sumld, nbdirs)
                    arg1 = l1 - 1
                    CALL DDOT_DV(arg1, c(k1, 1), cd(1, k1, 1), ldc, b(1
     +                           , l1), bd(1, 1, l1), 1, sumr, sumrd,
     +                           nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 1, 1) = cd(nd, k1, l1) - sumld(nd) - sgn*
     +                  sumrd(nd)
                    ENDDO
                    vec(1, 1) = c(k1, l1) - (suml+sgn*sumr)
                    IF (k2 + 1 .GT. m) THEN
                      min7 = m
                    ELSE
                      min7 = k2 + 1
                    END IF
                    IF (k2 + 1 .GT. m) THEN
                      min43 = m
                    ELSE
                      min43 = k2 + 1
                    END IF
C
                    arg1 = m - k2
                    CALL DDOT_DV(arg1, a(k1, min7), ad(1, k1, min7), lda
     +                           , c(min43, l2), cd(1, min43, l2), 1,
     +                           suml, sumld, nbdirs)
                    arg1 = l1 - 1
                    CALL DDOT_DV(arg1, c(k1, 1), cd(1, k1, 1), ldc, b(1
     +                           , l2), bd(1, 1, l2), 1, sumr, sumrd,
     +                           nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 1, 2) = cd(nd, k1, l2) - sumld(nd) - sgn*
     +                  sumrd(nd)
                    ENDDO
                    vec(1, 2) = c(k1, l2) - (suml+sgn*sumr)
                    IF (k2 + 1 .GT. m) THEN
                      min8 = m
                    ELSE
                      min8 = k2 + 1
                    END IF
                    IF (k2 + 1 .GT. m) THEN
                      min44 = m
                    ELSE
                      min44 = k2 + 1
                    END IF
C
                    arg1 = m - k2
                    CALL DDOT_DV(arg1, a(k2, min8), ad(1, k2, min8), lda
     +                           , c(min44, l1), cd(1, min44, l1), 1,
     +                           suml, sumld, nbdirs)
                    arg1 = l1 - 1
                    CALL DDOT_DV(arg1, c(k2, 1), cd(1, k2, 1), ldc, b(1
     +                           , l1), bd(1, 1, l1), 1, sumr, sumrd,
     +                           nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 2, 1) = cd(nd, k2, l1) - sumld(nd) - sgn*
     +                  sumrd(nd)
                    ENDDO
                    vec(2, 1) = c(k2, l1) - (suml+sgn*sumr)
                    IF (k2 + 1 .GT. m) THEN
                      min9 = m
                    ELSE
                      min9 = k2 + 1
                    END IF
                    IF (k2 + 1 .GT. m) THEN
                      min45 = m
                    ELSE
                      min45 = k2 + 1
                    END IF
C
                    arg1 = m - k2
                    CALL DDOT_DV(arg1, a(k2, min9), ad(1, k2, min9), lda
     +                           , c(min45, l2), cd(1, min45, l2), 1,
     +                           suml, sumld, nbdirs)
                    arg1 = l1 - 1
                    CALL DDOT_DV(arg1, c(k2, 1), cd(1, k2, 1), ldc, b(1
     +                           , l2), bd(1, 1, l2), 1, sumr, sumrd,
     +                           nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 2, 2) = cd(nd, k2, l2) - sumld(nd) - sgn*
     +                  sumrd(nd)
                    ENDDO
                    vec(2, 2) = c(k2, l2) - (suml+sgn*sumr)
C
                    CALL DLASY2_DV(.false., .false., isgn, 2, 2, a(k1,
     +                             k1), ad(1, k1, k1), lda, b(l1, l1),
     +                             bd(1, l1, l1), ldb, vec, vecd, 2,
     +                             scaloc, scalocd, x, xd, 2, xnorm,
     +                             ierr, nbdirs)
                    IF (ierr .NE. 0) info = 1
C
                    IF (scaloc .NE. one) THEN
                      DO j=1,n
                        CALL DSCAL_DV(m, scaloc, scalocd, c(1, j), cd(1
     +                                , 1, j), 1, nbdirs)
                      ENDDO
                      scale = scale*scaloc
                    END IF
                    DO nd=1,nbdirs
                      cd(nd, k1, l1) = xd(nd, 1, 1)
                      cd(nd, k1, l2) = xd(nd, 1, 2)
                      cd(nd, k2, l1) = xd(nd, 2, 1)
                      cd(nd, k2, l2) = xd(nd, 2, 2)
                    ENDDO
                    c(k1, l1) = x(1, 1)
                    c(k1, l2) = x(1, 2)
                    c(k2, l1) = x(2, 1)
                    c(k2, l2) = x(2, 2)
                  END IF
                END IF
              ENDDO
            END IF
          ENDDO
        ELSE IF (.NOT.notrna .AND. notrnb) THEN
C
C
C
C
C        Solve    A' *X + ISGN*X*B = scale*C.
C
C        The (K,L)th block of X is determined starting from
C        upper-left corner column by column by
C
C          A(K,K)'*X(K,L) + ISGN*X(K,L)*B(L,L) = C(K,L) - R(K,L)
C
C        Where
C                   K-1                        L-1
C          R(K,L) = SUM [A(I,K)'*X(I,L)] +ISGN*SUM [X(K,J)*B(J,L)]
C                   I=1                        J=1
C
C        Start column loop (index = L)
C        L1 (L2): column index of the first (last) row of X(K,L)
C
          lnext = 1
          DO nd=1,nbdirs
            scalocd(nd) = 0.D0
          ENDDO
          DO ii1=1,2
            DO ii2=1,2
              DO nd=1,nbdirs
                xd(nd, ii2, ii1) = 0.D0
              ENDDO
            ENDDO
          ENDDO
          DO ii1=1,2
            DO ii2=1,2
              DO nd=1,nbdirs
                vecd(nd, ii2, ii1) = 0.D0
              ENDDO
            ENDDO
          ENDDO
          DO l=1,n
            IF (.NOT.l .LT. lnext) THEN
              IF (l .EQ. n) THEN
                l1 = l
                l2 = l
              ELSE IF (b(l+1, l) .NE. zero) THEN
                l1 = l
                l2 = l + 1
                lnext = l + 2
              ELSE
                l1 = l
                l2 = l
                lnext = l + 1
              END IF
C
C           Start row loop (index = K)
C           K1 (K2): row index of the first (last) row of X(K,L)
C
              knext = 1
              DO k=1,m
                IF (.NOT.k .LT. knext) THEN
                  IF (k .EQ. m) THEN
                    k1 = k
                    k2 = k
                  ELSE IF (a(k+1, k) .NE. zero) THEN
                    k1 = k
                    k2 = k + 1
                    knext = k + 2
                  ELSE
                    k1 = k
                    k2 = k
                    knext = k + 1
                  END IF
C
                  IF (l1 .EQ. l2 .AND. k1 .EQ. k2) THEN
                    arg1 = k1 - 1
                    CALL DDOT_DV(arg1, a(1, k1), ad(1, 1, k1), 1, c(1,
     +                           l1), cd(1, 1, l1), 1, suml, sumld,
     +                           nbdirs)
                    arg1 = l1 - 1
                    CALL DDOT_DV(arg1, c(k1, 1), cd(1, k1, 1), ldc, b(1
     +                           , l1), bd(1, 1, l1), 1, sumr, sumrd,
     +                           nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 1, 1) = cd(nd, k1, l1) - sumld(nd) - sgn*
     +                  sumrd(nd)
                      a11d(nd) = ad(nd, k1, k1) + sgn*bd(nd, l1, l1)
                    ENDDO
                    vec(1, 1) = c(k1, l1) - (suml+sgn*sumr)
                    scaloc = one
C
                    a11 = a(k1, k1) + sgn*b(l1, l1)
                    IF (a11 .GE. 0.) THEN
                      da11 = a11
                    ELSE
                      da11 = -a11
                    END IF
                    IF (da11 .LE. smin) THEN
                      DO nd=1,nbdirs
                        a11d(nd) = smind(nd)
                      ENDDO
                      a11 = smin
                      da11 = smin
                      info = 1
                    END IF
                    IF (vec(1, 1) .GE. 0.) THEN
                      DO nd=1,nbdirs
                        dbd(nd) = vecd(nd, 1, 1)
                      ENDDO
                      db = vec(1, 1)
                    ELSE
                      DO nd=1,nbdirs
                        dbd(nd) = -vecd(nd, 1, 1)
                      ENDDO
                      db = -vec(1, 1)
                    END IF
                    IF (da11 .LT. one .AND. db .GT. one) THEN
                      IF (db .GT. bignum*da11) THEN
                        DO nd=1,nbdirs
                          scalocd(nd) = -(one*dbd(nd)/db**2)
                        ENDDO
                        scaloc = one/db
                      ELSE
                        DO nd=1,nbdirs
                          scalocd(nd) = 0.D0
                        ENDDO
                      END IF
                    ELSE
                      DO nd=1,nbdirs
                        scalocd(nd) = 0.D0
                      ENDDO
                    END IF
                    DO nd=1,nbdirs
                      xd(nd, 1, 1) = ((vecd(nd, 1, 1)*scaloc+vec(1, 1)*
     +                  scalocd(nd))*a11-vec(1, 1)*scaloc*a11d(nd))/a11
     +                  **2
                    ENDDO
                    x(1, 1) = vec(1, 1)*scaloc/a11
C
                    IF (scaloc .NE. one) THEN
                      DO j=1,n
                        CALL DSCAL_DV(m, scaloc, scalocd, c(1, j), cd(1
     +                                , 1, j), 1, nbdirs)
                      ENDDO
                      scale = scale*scaloc
                    END IF
                    DO nd=1,nbdirs
                      cd(nd, k1, l1) = xd(nd, 1, 1)
                    ENDDO
                    c(k1, l1) = x(1, 1)
C
                  ELSE IF (l1 .EQ. l2 .AND. k1 .NE. k2) THEN
C
                    arg1 = k1 - 1
                    CALL DDOT_DV(arg1, a(1, k1), ad(1, 1, k1), 1, c(1,
     +                           l1), cd(1, 1, l1), 1, suml, sumld,
     +                           nbdirs)
                    arg1 = l1 - 1
                    CALL DDOT_DV(arg1, c(k1, 1), cd(1, k1, 1), ldc, b(1
     +                           , l1), bd(1, 1, l1), 1, sumr, sumrd,
     +                           nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 1, 1) = cd(nd, k1, l1) - sumld(nd) - sgn*
     +                  sumrd(nd)
                      arg10d(nd) = -(sgn*bd(nd, l1, l1))
                    ENDDO
                    vec(1, 1) = c(k1, l1) - (suml+sgn*sumr)
C
                    arg1 = k1 - 1
                    CALL DDOT_DV(arg1, a(1, k2), ad(1, 1, k2), 1, c(1,
     +                           l1), cd(1, 1, l1), 1, suml, sumld,
     +                           nbdirs)
                    arg1 = l1 - 1
                    CALL DDOT_DV(arg1, c(k2, 1), cd(1, k2, 1), ldc, b(1
     +                           , l1), bd(1, 1, l1), 1, sumr, sumrd,
     +                           nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 2, 1) = cd(nd, k2, l1) - sumld(nd) - sgn*
     +                  sumrd(nd)
                    ENDDO
                    vec(2, 1) = c(k2, l1) - (suml+sgn*sumr)
C
                    arg10 = -(sgn*b(l1, l1))
                    CALL DLALN2_DV(.true., 2, 1, smin, smind, one, a(k1
     +                             , k1), ad(1, k1, k1), lda, one, one,
     +                             vec, vecd, 2, arg10, arg10d, zero, x
     +                             , xd, 2, scaloc, scalocd, xnorm, ierr
     +                             , nbdirs)
                    IF (ierr .NE. 0) info = 1
C
                    IF (scaloc .NE. one) THEN
                      DO j=1,n
                        CALL DSCAL_DV(m, scaloc, scalocd, c(1, j), cd(1
     +                                , 1, j), 1, nbdirs)
                      ENDDO
                      scale = scale*scaloc
                    END IF
                    DO nd=1,nbdirs
                      cd(nd, k1, l1) = xd(nd, 1, 1)
                      cd(nd, k2, l1) = xd(nd, 2, 1)
                    ENDDO
                    c(k1, l1) = x(1, 1)
                    c(k2, l1) = x(2, 1)
C
                  ELSE IF (l1 .NE. l2 .AND. k1 .EQ. k2) THEN
C
                    arg1 = k1 - 1
                    CALL DDOT_DV(arg1, a(1, k1), ad(1, 1, k1), 1, c(1,
     +                           l1), cd(1, 1, l1), 1, suml, sumld,
     +                           nbdirs)
                    arg1 = l1 - 1
                    CALL DDOT_DV(arg1, c(k1, 1), cd(1, k1, 1), ldc, b(1
     +                           , l1), bd(1, 1, l1), 1, sumr, sumrd,
     +                           nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 1, 1) = sgn*(cd(nd, k1, l1)-sumld(nd)-sgn
     +                  *sumrd(nd))
                      arg10d(nd) = -(sgn*ad(nd, k1, k1))
                    ENDDO
                    vec(1, 1) = sgn*(c(k1, l1)-(suml+sgn*sumr))
C
                    arg1 = k1 - 1
                    CALL DDOT_DV(arg1, a(1, k1), ad(1, 1, k1), 1, c(1,
     +                           l2), cd(1, 1, l2), 1, suml, sumld,
     +                           nbdirs)
                    arg1 = l1 - 1
                    CALL DDOT_DV(arg1, c(k1, 1), cd(1, k1, 1), ldc, b(1
     +                           , l2), bd(1, 1, l2), 1, sumr, sumrd,
     +                           nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 2, 1) = sgn*(cd(nd, k1, l2)-sumld(nd)-sgn
     +                  *sumrd(nd))
                    ENDDO
                    vec(2, 1) = sgn*(c(k1, l2)-(suml+sgn*sumr))
C
                    arg10 = -(sgn*a(k1, k1))
                    CALL DLALN2_DV(.true., 2, 1, smin, smind, one, b(l1
     +                             , l1), bd(1, l1, l1), ldb, one, one,
     +                             vec, vecd, 2, arg10, arg10d, zero, x
     +                             , xd, 2, scaloc, scalocd, xnorm, ierr
     +                             , nbdirs)
                    IF (ierr .NE. 0) info = 1
C
                    IF (scaloc .NE. one) THEN
                      DO j=1,n
                        CALL DSCAL_DV(m, scaloc, scalocd, c(1, j), cd(1
     +                                , 1, j), 1, nbdirs)
                      ENDDO
                      scale = scale*scaloc
                    END IF
                    DO nd=1,nbdirs
                      cd(nd, k1, l1) = xd(nd, 1, 1)
                      cd(nd, k1, l2) = xd(nd, 2, 1)
                    ENDDO
                    c(k1, l1) = x(1, 1)
                    c(k1, l2) = x(2, 1)
C
                  ELSE IF (l1 .NE. l2 .AND. k1 .NE. k2) THEN
C
                    arg1 = k1 - 1
                    CALL DDOT_DV(arg1, a(1, k1), ad(1, 1, k1), 1, c(1,
     +                           l1), cd(1, 1, l1), 1, suml, sumld,
     +                           nbdirs)
                    arg1 = l1 - 1
                    CALL DDOT_DV(arg1, c(k1, 1), cd(1, k1, 1), ldc, b(1
     +                           , l1), bd(1, 1, l1), 1, sumr, sumrd,
     +                           nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 1, 1) = cd(nd, k1, l1) - sumld(nd) - sgn*
     +                  sumrd(nd)
                    ENDDO
                    vec(1, 1) = c(k1, l1) - (suml+sgn*sumr)
C
                    arg1 = k1 - 1
                    CALL DDOT_DV(arg1, a(1, k1), ad(1, 1, k1), 1, c(1,
     +                           l2), cd(1, 1, l2), 1, suml, sumld,
     +                           nbdirs)
                    arg1 = l1 - 1
                    CALL DDOT_DV(arg1, c(k1, 1), cd(1, k1, 1), ldc, b(1
     +                           , l2), bd(1, 1, l2), 1, sumr, sumrd,
     +                           nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 1, 2) = cd(nd, k1, l2) - sumld(nd) - sgn*
     +                  sumrd(nd)
                    ENDDO
                    vec(1, 2) = c(k1, l2) - (suml+sgn*sumr)
C
                    arg1 = k1 - 1
                    CALL DDOT_DV(arg1, a(1, k2), ad(1, 1, k2), 1, c(1,
     +                           l1), cd(1, 1, l1), 1, suml, sumld,
     +                           nbdirs)
                    arg1 = l1 - 1
                    CALL DDOT_DV(arg1, c(k2, 1), cd(1, k2, 1), ldc, b(1
     +                           , l1), bd(1, 1, l1), 1, sumr, sumrd,
     +                           nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 2, 1) = cd(nd, k2, l1) - sumld(nd) - sgn*
     +                  sumrd(nd)
                    ENDDO
                    vec(2, 1) = c(k2, l1) - (suml+sgn*sumr)
C
                    arg1 = k1 - 1
                    CALL DDOT_DV(arg1, a(1, k2), ad(1, 1, k2), 1, c(1,
     +                           l2), cd(1, 1, l2), 1, suml, sumld,
     +                           nbdirs)
                    arg1 = l1 - 1
                    CALL DDOT_DV(arg1, c(k2, 1), cd(1, k2, 1), ldc, b(1
     +                           , l2), bd(1, 1, l2), 1, sumr, sumrd,
     +                           nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 2, 2) = cd(nd, k2, l2) - sumld(nd) - sgn*
     +                  sumrd(nd)
                    ENDDO
                    vec(2, 2) = c(k2, l2) - (suml+sgn*sumr)
C
                    CALL DLASY2_DV(.true., .false., isgn, 2, 2, a(k1, k1
     +                             ), ad(1, k1, k1), lda, b(l1, l1), bd(
     +                             1, l1, l1), ldb, vec, vecd, 2, scaloc
     +                             , scalocd, x, xd, 2, xnorm, ierr,
     +                             nbdirs)
                    IF (ierr .NE. 0) info = 1
C
                    IF (scaloc .NE. one) THEN
                      DO j=1,n
                        CALL DSCAL_DV(m, scaloc, scalocd, c(1, j), cd(1
     +                                , 1, j), 1, nbdirs)
                      ENDDO
                      scale = scale*scaloc
                    END IF
                    DO nd=1,nbdirs
                      cd(nd, k1, l1) = xd(nd, 1, 1)
                      cd(nd, k1, l2) = xd(nd, 1, 2)
                      cd(nd, k2, l1) = xd(nd, 2, 1)
                      cd(nd, k2, l2) = xd(nd, 2, 2)
                    ENDDO
                    c(k1, l1) = x(1, 1)
                    c(k1, l2) = x(1, 2)
                    c(k2, l1) = x(2, 1)
                    c(k2, l2) = x(2, 2)
                  END IF
                END IF
              ENDDO
            END IF
          ENDDO
        ELSE IF (.NOT.notrna .AND. (.NOT.notrnb)) THEN
C
C
C
C        Solve    A'*X + ISGN*X*B' = scale*C.
C
C        The (K,L)th block of X is determined starting from
C        top-right corner column by column by
C
C           A(K,K)'*X(K,L) + ISGN*X(K,L)*B(L,L)' = C(K,L) - R(K,L)
C
C        Where
C                     K-1                          N
C            R(K,L) = SUM [A(I,K)'*X(I,L)] + ISGN*SUM [X(K,J)*B(L,J)'].
C                     I=1                        J=L+1
C
C        Start column loop (index = L)
C        L1 (L2): column index of the first (last) row of X(K,L)
C
          lnext = n
          DO nd=1,nbdirs
            scalocd(nd) = 0.D0
          ENDDO
          DO ii1=1,2
            DO ii2=1,2
              DO nd=1,nbdirs
                xd(nd, ii2, ii1) = 0.D0
              ENDDO
            ENDDO
          ENDDO
          DO ii1=1,2
            DO ii2=1,2
              DO nd=1,nbdirs
                vecd(nd, ii2, ii1) = 0.D0
              ENDDO
            ENDDO
          ENDDO
          DO l=n,1,-1
            IF (.NOT.l .GT. lnext) THEN
              IF (l .EQ. 1) THEN
                l1 = l
                l2 = l
              ELSE IF (b(l, l-1) .NE. zero) THEN
                l1 = l - 1
                l2 = l
                lnext = l - 2
              ELSE
                l1 = l
                l2 = l
                lnext = l - 1
              END IF
C
C           Start row loop (index = K)
C           K1 (K2): row index of the first (last) row of X(K,L)
C
              knext = 1
              DO k=1,m
                IF (.NOT.k .LT. knext) THEN
                  IF (k .EQ. m) THEN
                    k1 = k
                    k2 = k
                  ELSE IF (a(k+1, k) .NE. zero) THEN
                    k1 = k
                    k2 = k + 1
                    knext = k + 2
                  ELSE
                    k1 = k
                    k2 = k
                    knext = k + 1
                  END IF
C
                  IF (l1 .EQ. l2 .AND. k1 .EQ. k2) THEN
                    arg1 = k1 - 1
                    CALL DDOT_DV(arg1, a(1, k1), ad(1, 1, k1), 1, c(1,
     +                           l1), cd(1, 1, l1), 1, suml, sumld,
     +                           nbdirs)
                    IF (l1 + 1 .GT. n) THEN
                      min10 = n
                    ELSE
                      min10 = l1 + 1
                    END IF
                    IF (l1 + 1 .GT. n) THEN
                      min46 = n
                    ELSE
                      min46 = l1 + 1
                    END IF
                    arg1 = n - l1
                    CALL DDOT_DV(arg1, c(k1, min10), cd(1, k1, min10),
     +                           ldc, b(l1, min46), bd(1, l1, min46),
     +                           ldb, sumr, sumrd, nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 1, 1) = cd(nd, k1, l1) - sumld(nd) - sgn*
     +                  sumrd(nd)
                      a11d(nd) = ad(nd, k1, k1) + sgn*bd(nd, l1, l1)
                    ENDDO
                    vec(1, 1) = c(k1, l1) - (suml+sgn*sumr)
                    scaloc = one
C
                    a11 = a(k1, k1) + sgn*b(l1, l1)
                    IF (a11 .GE. 0.) THEN
                      da11 = a11
                    ELSE
                      da11 = -a11
                    END IF
                    IF (da11 .LE. smin) THEN
                      DO nd=1,nbdirs
                        a11d(nd) = smind(nd)
                      ENDDO
                      a11 = smin
                      da11 = smin
                      info = 1
                    END IF
                    IF (vec(1, 1) .GE. 0.) THEN
                      DO nd=1,nbdirs
                        dbd(nd) = vecd(nd, 1, 1)
                      ENDDO
                      db = vec(1, 1)
                    ELSE
                      DO nd=1,nbdirs
                        dbd(nd) = -vecd(nd, 1, 1)
                      ENDDO
                      db = -vec(1, 1)
                    END IF
                    IF (da11 .LT. one .AND. db .GT. one) THEN
                      IF (db .GT. bignum*da11) THEN
                        DO nd=1,nbdirs
                          scalocd(nd) = -(one*dbd(nd)/db**2)
                        ENDDO
                        scaloc = one/db
                      ELSE
                        DO nd=1,nbdirs
                          scalocd(nd) = 0.D0
                        ENDDO
                      END IF
                    ELSE
                      DO nd=1,nbdirs
                        scalocd(nd) = 0.D0
                      ENDDO
                    END IF
                    DO nd=1,nbdirs
                      xd(nd, 1, 1) = ((vecd(nd, 1, 1)*scaloc+vec(1, 1)*
     +                  scalocd(nd))*a11-vec(1, 1)*scaloc*a11d(nd))/a11
     +                  **2
                    ENDDO
                    x(1, 1) = vec(1, 1)*scaloc/a11
C
                    IF (scaloc .NE. one) THEN
                      DO j=1,n
                        CALL DSCAL_DV(m, scaloc, scalocd, c(1, j), cd(1
     +                                , 1, j), 1, nbdirs)
                      ENDDO
                      scale = scale*scaloc
                    END IF
                    DO nd=1,nbdirs
                      cd(nd, k1, l1) = xd(nd, 1, 1)
                    ENDDO
                    c(k1, l1) = x(1, 1)
C
                  ELSE IF (l1 .EQ. l2 .AND. k1 .NE. k2) THEN
C
                    arg1 = k1 - 1
                    CALL DDOT_DV(arg1, a(1, k1), ad(1, 1, k1), 1, c(1,
     +                           l1), cd(1, 1, l1), 1, suml, sumld,
     +                           nbdirs)
                    IF (l2 + 1 .GT. n) THEN
                      min11 = n
                    ELSE
                      min11 = l2 + 1
                    END IF
                    IF (l2 + 1 .GT. n) THEN
                      min47 = n
                    ELSE
                      min47 = l2 + 1
                    END IF
                    arg1 = n - l2
                    CALL DDOT_DV(arg1, c(k1, min11), cd(1, k1, min11),
     +                           ldc, b(l1, min47), bd(1, l1, min47),
     +                           ldb, sumr, sumrd, nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 1, 1) = cd(nd, k1, l1) - sumld(nd) - sgn*
     +                  sumrd(nd)
                    ENDDO
                    vec(1, 1) = c(k1, l1) - (suml+sgn*sumr)
C
                    arg1 = k1 - 1
                    CALL DDOT_DV(arg1, a(1, k2), ad(1, 1, k2), 1, c(1,
     +                           l1), cd(1, 1, l1), 1, suml, sumld,
     +                           nbdirs)
                    IF (l2 + 1 .GT. n) THEN
                      min12 = n
                    ELSE
                      min12 = l2 + 1
                    END IF
                    IF (l2 + 1 .GT. n) THEN
                      min48 = n
                    ELSE
                      min48 = l2 + 1
                    END IF
                    arg1 = n - l2
                    CALL DDOT_DV(arg1, c(k2, min12), cd(1, k2, min12),
     +                           ldc, b(l1, min48), bd(1, l1, min48),
     +                           ldb, sumr, sumrd, nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 2, 1) = cd(nd, k2, l1) - sumld(nd) - sgn*
     +                  sumrd(nd)
                      arg10d(nd) = -(sgn*bd(nd, l1, l1))
                    ENDDO
                    vec(2, 1) = c(k2, l1) - (suml+sgn*sumr)
C
                    arg10 = -(sgn*b(l1, l1))
                    CALL DLALN2_DV(.true., 2, 1, smin, smind, one, a(k1
     +                             , k1), ad(1, k1, k1), lda, one, one,
     +                             vec, vecd, 2, arg10, arg10d, zero, x
     +                             , xd, 2, scaloc, scalocd, xnorm, ierr
     +                             , nbdirs)
                    IF (ierr .NE. 0) info = 1
C
                    IF (scaloc .NE. one) THEN
                      DO j=1,n
                        CALL DSCAL_DV(m, scaloc, scalocd, c(1, j), cd(1
     +                                , 1, j), 1, nbdirs)
                      ENDDO
                      scale = scale*scaloc
                    END IF
                    DO nd=1,nbdirs
                      cd(nd, k1, l1) = xd(nd, 1, 1)
                      cd(nd, k2, l1) = xd(nd, 2, 1)
                    ENDDO
                    c(k1, l1) = x(1, 1)
                    c(k2, l1) = x(2, 1)
C
                  ELSE IF (l1 .NE. l2 .AND. k1 .EQ. k2) THEN
C
                    arg1 = k1 - 1
                    CALL DDOT_DV(arg1, a(1, k1), ad(1, 1, k1), 1, c(1,
     +                           l1), cd(1, 1, l1), 1, suml, sumld,
     +                           nbdirs)
                    IF (l2 + 1 .GT. n) THEN
                      min13 = n
                    ELSE
                      min13 = l2 + 1
                    END IF
                    IF (l2 + 1 .GT. n) THEN
                      min49 = n
                    ELSE
                      min49 = l2 + 1
                    END IF
                    arg1 = n - l2
                    CALL DDOT_DV(arg1, c(k1, min13), cd(1, k1, min13),
     +                           ldc, b(l1, min49), bd(1, l1, min49),
     +                           ldb, sumr, sumrd, nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 1, 1) = sgn*(cd(nd, k1, l1)-sumld(nd)-sgn
     +                  *sumrd(nd))
                    ENDDO
                    vec(1, 1) = sgn*(c(k1, l1)-(suml+sgn*sumr))
C
                    arg1 = k1 - 1
                    CALL DDOT_DV(arg1, a(1, k1), ad(1, 1, k1), 1, c(1,
     +                           l2), cd(1, 1, l2), 1, suml, sumld,
     +                           nbdirs)
                    IF (l2 + 1 .GT. n) THEN
                      min14 = n
                    ELSE
                      min14 = l2 + 1
                    END IF
                    IF (l2 + 1 .GT. n) THEN
                      min50 = n
                    ELSE
                      min50 = l2 + 1
                    END IF
                    arg1 = n - l2
                    CALL DDOT_DV(arg1, c(k1, min14), cd(1, k1, min14),
     +                           ldc, b(l2, min50), bd(1, l2, min50),
     +                           ldb, sumr, sumrd, nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 2, 1) = sgn*(cd(nd, k1, l2)-sumld(nd)-sgn
     +                  *sumrd(nd))
                      arg10d(nd) = -(sgn*ad(nd, k1, k1))
                    ENDDO
                    vec(2, 1) = sgn*(c(k1, l2)-(suml+sgn*sumr))
C
                    arg10 = -(sgn*a(k1, k1))
                    CALL DLALN2_DV(.false., 2, 1, smin, smind, one, b(l1
     +                             , l1), bd(1, l1, l1), ldb, one, one,
     +                             vec, vecd, 2, arg10, arg10d, zero, x
     +                             , xd, 2, scaloc, scalocd, xnorm, ierr
     +                             , nbdirs)
                    IF (ierr .NE. 0) info = 1
C
                    IF (scaloc .NE. one) THEN
                      DO j=1,n
                        CALL DSCAL_DV(m, scaloc, scalocd, c(1, j), cd(1
     +                                , 1, j), 1, nbdirs)
                      ENDDO
                      scale = scale*scaloc
                    END IF
                    DO nd=1,nbdirs
                      cd(nd, k1, l1) = xd(nd, 1, 1)
                      cd(nd, k1, l2) = xd(nd, 2, 1)
                    ENDDO
                    c(k1, l1) = x(1, 1)
                    c(k1, l2) = x(2, 1)
C
                  ELSE IF (l1 .NE. l2 .AND. k1 .NE. k2) THEN
C
                    arg1 = k1 - 1
                    CALL DDOT_DV(arg1, a(1, k1), ad(1, 1, k1), 1, c(1,
     +                           l1), cd(1, 1, l1), 1, suml, sumld,
     +                           nbdirs)
                    IF (l2 + 1 .GT. n) THEN
                      min15 = n
                    ELSE
                      min15 = l2 + 1
                    END IF
                    IF (l2 + 1 .GT. n) THEN
                      min51 = n
                    ELSE
                      min51 = l2 + 1
                    END IF
                    arg1 = n - l2
                    CALL DDOT_DV(arg1, c(k1, min15), cd(1, k1, min15),
     +                           ldc, b(l1, min51), bd(1, l1, min51),
     +                           ldb, sumr, sumrd, nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 1, 1) = cd(nd, k1, l1) - sumld(nd) - sgn*
     +                  sumrd(nd)
                    ENDDO
                    vec(1, 1) = c(k1, l1) - (suml+sgn*sumr)
C
                    arg1 = k1 - 1
                    CALL DDOT_DV(arg1, a(1, k1), ad(1, 1, k1), 1, c(1,
     +                           l2), cd(1, 1, l2), 1, suml, sumld,
     +                           nbdirs)
                    IF (l2 + 1 .GT. n) THEN
                      min16 = n
                    ELSE
                      min16 = l2 + 1
                    END IF
                    IF (l2 + 1 .GT. n) THEN
                      min52 = n
                    ELSE
                      min52 = l2 + 1
                    END IF
                    arg1 = n - l2
                    CALL DDOT_DV(arg1, c(k1, min16), cd(1, k1, min16),
     +                           ldc, b(l2, min52), bd(1, l2, min52),
     +                           ldb, sumr, sumrd, nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 1, 2) = cd(nd, k1, l2) - sumld(nd) - sgn*
     +                  sumrd(nd)
                    ENDDO
                    vec(1, 2) = c(k1, l2) - (suml+sgn*sumr)
C
                    arg1 = k1 - 1
                    CALL DDOT_DV(arg1, a(1, k2), ad(1, 1, k2), 1, c(1,
     +                           l1), cd(1, 1, l1), 1, suml, sumld,
     +                           nbdirs)
                    IF (l2 + 1 .GT. n) THEN
                      min17 = n
                    ELSE
                      min17 = l2 + 1
                    END IF
                    IF (l2 + 1 .GT. n) THEN
                      min53 = n
                    ELSE
                      min53 = l2 + 1
                    END IF
                    arg1 = n - l2
                    CALL DDOT_DV(arg1, c(k2, min17), cd(1, k2, min17),
     +                           ldc, b(l1, min53), bd(1, l1, min53),
     +                           ldb, sumr, sumrd, nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 2, 1) = cd(nd, k2, l1) - sumld(nd) - sgn*
     +                  sumrd(nd)
                    ENDDO
                    vec(2, 1) = c(k2, l1) - (suml+sgn*sumr)
C
                    arg1 = k1 - 1
                    CALL DDOT_DV(arg1, a(1, k2), ad(1, 1, k2), 1, c(1,
     +                           l2), cd(1, 1, l2), 1, suml, sumld,
     +                           nbdirs)
                    IF (l2 + 1 .GT. n) THEN
                      min18 = n
                    ELSE
                      min18 = l2 + 1
                    END IF
                    IF (l2 + 1 .GT. n) THEN
                      min54 = n
                    ELSE
                      min54 = l2 + 1
                    END IF
                    arg1 = n - l2
                    CALL DDOT_DV(arg1, c(k2, min18), cd(1, k2, min18),
     +                           ldc, b(l2, min54), bd(1, l2, min54),
     +                           ldb, sumr, sumrd, nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 2, 2) = cd(nd, k2, l2) - sumld(nd) - sgn*
     +                  sumrd(nd)
                    ENDDO
                    vec(2, 2) = c(k2, l2) - (suml+sgn*sumr)
C
                    CALL DLASY2_DV(.true., .true., isgn, 2, 2, a(k1, k1)
     +                             , ad(1, k1, k1), lda, b(l1, l1), bd(1
     +                             , l1, l1), ldb, vec, vecd, 2, scaloc
     +                             , scalocd, x, xd, 2, xnorm, ierr,
     +                             nbdirs)
                    IF (ierr .NE. 0) info = 1
C
                    IF (scaloc .NE. one) THEN
                      DO j=1,n
                        CALL DSCAL_DV(m, scaloc, scalocd, c(1, j), cd(1
     +                                , 1, j), 1, nbdirs)
                      ENDDO
                      scale = scale*scaloc
                    END IF
                    DO nd=1,nbdirs
                      cd(nd, k1, l1) = xd(nd, 1, 1)
                      cd(nd, k1, l2) = xd(nd, 1, 2)
                      cd(nd, k2, l1) = xd(nd, 2, 1)
                      cd(nd, k2, l2) = xd(nd, 2, 2)
                    ENDDO
                    c(k1, l1) = x(1, 1)
                    c(k1, l2) = x(1, 2)
                    c(k2, l1) = x(2, 1)
                    c(k2, l2) = x(2, 2)
                  END IF
                END IF
              ENDDO
            END IF
          ENDDO
        ELSE IF (notrna .AND. (.NOT.notrnb)) THEN
C
C
C
C        Solve    A*X + ISGN*X*B' = scale*C.
C
C        The (K,L)th block of X is determined starting from
C        bottom-right corner column by column by
C
C            A(K,K)*X(K,L) + ISGN*X(K,L)*B(L,L)' = C(K,L) - R(K,L)
C
C        Where
C                      M                          N
C            R(K,L) = SUM [A(K,I)*X(I,L)] + ISGN*SUM [X(K,J)*B(L,J)'].
C                    I=K+1                      J=L+1
C
C        Start column loop (index = L)
C        L1 (L2): column index of the first (last) row of X(K,L)
C
          lnext = n
          DO nd=1,nbdirs
            scalocd(nd) = 0.D0
          ENDDO
          DO ii1=1,2
            DO ii2=1,2
              DO nd=1,nbdirs
                xd(nd, ii2, ii1) = 0.D0
              ENDDO
            ENDDO
          ENDDO
          DO ii1=1,2
            DO ii2=1,2
              DO nd=1,nbdirs
                vecd(nd, ii2, ii1) = 0.D0
              ENDDO
            ENDDO
          ENDDO
          DO l=n,1,-1
            IF (.NOT.l .GT. lnext) THEN
              IF (l .EQ. 1) THEN
                l1 = l
                l2 = l
              ELSE IF (b(l, l-1) .NE. zero) THEN
                l1 = l - 1
                l2 = l
                lnext = l - 2
              ELSE
                l1 = l
                l2 = l
                lnext = l - 1
              END IF
C
C           Start row loop (index = K)
C           K1 (K2): row index of the first (last) row of X(K,L)
C
              knext = m
              DO k=m,1,-1
                IF (.NOT.k .GT. knext) THEN
                  IF (k .EQ. 1) THEN
                    k1 = k
                    k2 = k
                  ELSE IF (a(k, k-1) .NE. zero) THEN
                    k1 = k - 1
                    k2 = k
                    knext = k - 2
                  ELSE
                    k1 = k
                    k2 = k
                    knext = k - 1
                  END IF
C
                  IF (l1 .EQ. l2 .AND. k1 .EQ. k2) THEN
                    IF (k1 + 1 .GT. m) THEN
                      min19 = m
                    ELSE
                      min19 = k1 + 1
                    END IF
                    IF (k1 + 1 .GT. m) THEN
                      min55 = m
                    ELSE
                      min55 = k1 + 1
                    END IF
                    arg1 = m - k1
                    CALL DDOT_DV(arg1, a(k1, min19), ad(1, k1, min19),
     +                           lda, c(min55, l1), cd(1, min55, l1), 1
     +                           , suml, sumld, nbdirs)
                    IF (l1 + 1 .GT. n) THEN
                      min20 = n
                    ELSE
                      min20 = l1 + 1
                    END IF
                    IF (l1 + 1 .GT. n) THEN
                      min56 = n
                    ELSE
                      min56 = l1 + 1
                    END IF
                    arg1 = n - l1
                    CALL DDOT_DV(arg1, c(k1, min20), cd(1, k1, min20),
     +                           ldc, b(l1, min56), bd(1, l1, min56),
     +                           ldb, sumr, sumrd, nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 1, 1) = cd(nd, k1, l1) - sumld(nd) - sgn*
     +                  sumrd(nd)
                      a11d(nd) = ad(nd, k1, k1) + sgn*bd(nd, l1, l1)
                    ENDDO
                    vec(1, 1) = c(k1, l1) - (suml+sgn*sumr)
                    scaloc = one
C
                    a11 = a(k1, k1) + sgn*b(l1, l1)
                    IF (a11 .GE. 0.) THEN
                      da11 = a11
                    ELSE
                      da11 = -a11
                    END IF
                    IF (da11 .LE. smin) THEN
                      DO nd=1,nbdirs
                        a11d(nd) = smind(nd)
                      ENDDO
                      a11 = smin
                      da11 = smin
                      info = 1
                    END IF
                    IF (vec(1, 1) .GE. 0.) THEN
                      DO nd=1,nbdirs
                        dbd(nd) = vecd(nd, 1, 1)
                      ENDDO
                      db = vec(1, 1)
                    ELSE
                      DO nd=1,nbdirs
                        dbd(nd) = -vecd(nd, 1, 1)
                      ENDDO
                      db = -vec(1, 1)
                    END IF
                    IF (da11 .LT. one .AND. db .GT. one) THEN
                      IF (db .GT. bignum*da11) THEN
                        DO nd=1,nbdirs
                          scalocd(nd) = -(one*dbd(nd)/db**2)
                        ENDDO
                        scaloc = one/db
                      ELSE
                        DO nd=1,nbdirs
                          scalocd(nd) = 0.D0
                        ENDDO
                      END IF
                    ELSE
                      DO nd=1,nbdirs
                        scalocd(nd) = 0.D0
                      ENDDO
                    END IF
                    DO nd=1,nbdirs
                      xd(nd, 1, 1) = ((vecd(nd, 1, 1)*scaloc+vec(1, 1)*
     +                  scalocd(nd))*a11-vec(1, 1)*scaloc*a11d(nd))/a11
     +                  **2
                    ENDDO
                    x(1, 1) = vec(1, 1)*scaloc/a11
C
                    IF (scaloc .NE. one) THEN
                      DO j=1,n
                        CALL DSCAL_DV(m, scaloc, scalocd, c(1, j), cd(1
     +                                , 1, j), 1, nbdirs)
                      ENDDO
                      scale = scale*scaloc
                    END IF
                    DO nd=1,nbdirs
                      cd(nd, k1, l1) = xd(nd, 1, 1)
                    ENDDO
                    c(k1, l1) = x(1, 1)
C
                  ELSE IF (l1 .EQ. l2 .AND. k1 .NE. k2) THEN
                    IF (k2 + 1 .GT. m) THEN
                      min21 = m
                    ELSE
                      min21 = k2 + 1
                    END IF
                    IF (k2 + 1 .GT. m) THEN
                      min57 = m
                    ELSE
                      min57 = k2 + 1
                    END IF
C
                    arg1 = m - k2
                    CALL DDOT_DV(arg1, a(k1, min21), ad(1, k1, min21),
     +                           lda, c(min57, l1), cd(1, min57, l1), 1
     +                           , suml, sumld, nbdirs)
                    IF (l2 + 1 .GT. n) THEN
                      min22 = n
                    ELSE
                      min22 = l2 + 1
                    END IF
                    IF (l2 + 1 .GT. n) THEN
                      min58 = n
                    ELSE
                      min58 = l2 + 1
                    END IF
                    arg1 = n - l2
                    CALL DDOT_DV(arg1, c(k1, min22), cd(1, k1, min22),
     +                           ldc, b(l1, min58), bd(1, l1, min58),
     +                           ldb, sumr, sumrd, nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 1, 1) = cd(nd, k1, l1) - sumld(nd) - sgn*
     +                  sumrd(nd)
                    ENDDO
                    vec(1, 1) = c(k1, l1) - (suml+sgn*sumr)
                    IF (k2 + 1 .GT. m) THEN
                      min23 = m
                    ELSE
                      min23 = k2 + 1
                    END IF
                    IF (k2 + 1 .GT. m) THEN
                      min59 = m
                    ELSE
                      min59 = k2 + 1
                    END IF
C
                    arg1 = m - k2
                    CALL DDOT_DV(arg1, a(k2, min23), ad(1, k2, min23),
     +                           lda, c(min59, l1), cd(1, min59, l1), 1
     +                           , suml, sumld, nbdirs)
                    IF (l2 + 1 .GT. n) THEN
                      min24 = n
                    ELSE
                      min24 = l2 + 1
                    END IF
                    IF (l2 + 1 .GT. n) THEN
                      min60 = n
                    ELSE
                      min60 = l2 + 1
                    END IF
                    arg1 = n - l2
                    CALL DDOT_DV(arg1, c(k2, min24), cd(1, k2, min24),
     +                           ldc, b(l1, min60), bd(1, l1, min60),
     +                           ldb, sumr, sumrd, nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 2, 1) = cd(nd, k2, l1) - sumld(nd) - sgn*
     +                  sumrd(nd)
                      arg10d(nd) = -(sgn*bd(nd, l1, l1))
                    ENDDO
                    vec(2, 1) = c(k2, l1) - (suml+sgn*sumr)
C
                    arg10 = -(sgn*b(l1, l1))
                    CALL DLALN2_DV(.false., 2, 1, smin, smind, one, a(k1
     +                             , k1), ad(1, k1, k1), lda, one, one,
     +                             vec, vecd, 2, arg10, arg10d, zero, x
     +                             , xd, 2, scaloc, scalocd, xnorm, ierr
     +                             , nbdirs)
                    IF (ierr .NE. 0) info = 1
C
                    IF (scaloc .NE. one) THEN
                      DO j=1,n
                        CALL DSCAL_DV(m, scaloc, scalocd, c(1, j), cd(1
     +                                , 1, j), 1, nbdirs)
                      ENDDO
                      scale = scale*scaloc
                    END IF
                    DO nd=1,nbdirs
                      cd(nd, k1, l1) = xd(nd, 1, 1)
                      cd(nd, k2, l1) = xd(nd, 2, 1)
                    ENDDO
                    c(k1, l1) = x(1, 1)
                    c(k2, l1) = x(2, 1)
C
                  ELSE IF (l1 .NE. l2 .AND. k1 .EQ. k2) THEN
                    IF (k1 + 1 .GT. m) THEN
                      min25 = m
                    ELSE
                      min25 = k1 + 1
                    END IF
                    IF (k1 + 1 .GT. m) THEN
                      min61 = m
                    ELSE
                      min61 = k1 + 1
                    END IF
C
                    arg1 = m - k1
                    CALL DDOT_DV(arg1, a(k1, min25), ad(1, k1, min25),
     +                           lda, c(min61, l1), cd(1, min61, l1), 1
     +                           , suml, sumld, nbdirs)
                    IF (l2 + 1 .GT. n) THEN
                      min26 = n
                    ELSE
                      min26 = l2 + 1
                    END IF
                    IF (l2 + 1 .GT. n) THEN
                      min62 = n
                    ELSE
                      min62 = l2 + 1
                    END IF
                    arg1 = n - l2
                    CALL DDOT_DV(arg1, c(k1, min26), cd(1, k1, min26),
     +                           ldc, b(l1, min62), bd(1, l1, min62),
     +                           ldb, sumr, sumrd, nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 1, 1) = sgn*(cd(nd, k1, l1)-sumld(nd)-sgn
     +                  *sumrd(nd))
                    ENDDO
                    vec(1, 1) = sgn*(c(k1, l1)-(suml+sgn*sumr))
                    IF (k1 + 1 .GT. m) THEN
                      min27 = m
                    ELSE
                      min27 = k1 + 1
                    END IF
                    IF (k1 + 1 .GT. m) THEN
                      min63 = m
                    ELSE
                      min63 = k1 + 1
                    END IF
C
                    arg1 = m - k1
                    CALL DDOT_DV(arg1, a(k1, min27), ad(1, k1, min27),
     +                           lda, c(min63, l2), cd(1, min63, l2), 1
     +                           , suml, sumld, nbdirs)
                    IF (l2 + 1 .GT. n) THEN
                      min28 = n
                    ELSE
                      min28 = l2 + 1
                    END IF
                    IF (l2 + 1 .GT. n) THEN
                      min64 = n
                    ELSE
                      min64 = l2 + 1
                    END IF
                    arg1 = n - l2
                    CALL DDOT_DV(arg1, c(k1, min28), cd(1, k1, min28),
     +                           ldc, b(l2, min64), bd(1, l2, min64),
     +                           ldb, sumr, sumrd, nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 2, 1) = sgn*(cd(nd, k1, l2)-sumld(nd)-sgn
     +                  *sumrd(nd))
                      arg10d(nd) = -(sgn*ad(nd, k1, k1))
                    ENDDO
                    vec(2, 1) = sgn*(c(k1, l2)-(suml+sgn*sumr))
C
                    arg10 = -(sgn*a(k1, k1))
                    CALL DLALN2_DV(.false., 2, 1, smin, smind, one, b(l1
     +                             , l1), bd(1, l1, l1), ldb, one, one,
     +                             vec, vecd, 2, arg10, arg10d, zero, x
     +                             , xd, 2, scaloc, scalocd, xnorm, ierr
     +                             , nbdirs)
                    IF (ierr .NE. 0) info = 1
C
                    IF (scaloc .NE. one) THEN
                      DO j=1,n
                        CALL DSCAL_DV(m, scaloc, scalocd, c(1, j), cd(1
     +                                , 1, j), 1, nbdirs)
                      ENDDO
                      scale = scale*scaloc
                    END IF
                    DO nd=1,nbdirs
                      cd(nd, k1, l1) = xd(nd, 1, 1)
                      cd(nd, k1, l2) = xd(nd, 2, 1)
                    ENDDO
                    c(k1, l1) = x(1, 1)
                    c(k1, l2) = x(2, 1)
C
                  ELSE IF (l1 .NE. l2 .AND. k1 .NE. k2) THEN
                    IF (k2 + 1 .GT. m) THEN
                      min29 = m
                    ELSE
                      min29 = k2 + 1
                    END IF
                    IF (k2 + 1 .GT. m) THEN
                      min65 = m
                    ELSE
                      min65 = k2 + 1
                    END IF
C
                    arg1 = m - k2
                    CALL DDOT_DV(arg1, a(k1, min29), ad(1, k1, min29),
     +                           lda, c(min65, l1), cd(1, min65, l1), 1
     +                           , suml, sumld, nbdirs)
                    IF (l2 + 1 .GT. n) THEN
                      min30 = n
                    ELSE
                      min30 = l2 + 1
                    END IF
                    IF (l2 + 1 .GT. n) THEN
                      min66 = n
                    ELSE
                      min66 = l2 + 1
                    END IF
                    arg1 = n - l2
                    CALL DDOT_DV(arg1, c(k1, min30), cd(1, k1, min30),
     +                           ldc, b(l1, min66), bd(1, l1, min66),
     +                           ldb, sumr, sumrd, nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 1, 1) = cd(nd, k1, l1) - sumld(nd) - sgn*
     +                  sumrd(nd)
                    ENDDO
                    vec(1, 1) = c(k1, l1) - (suml+sgn*sumr)
                    IF (k2 + 1 .GT. m) THEN
                      min31 = m
                    ELSE
                      min31 = k2 + 1
                    END IF
                    IF (k2 + 1 .GT. m) THEN
                      min67 = m
                    ELSE
                      min67 = k2 + 1
                    END IF
C
                    arg1 = m - k2
                    CALL DDOT_DV(arg1, a(k1, min31), ad(1, k1, min31),
     +                           lda, c(min67, l2), cd(1, min67, l2), 1
     +                           , suml, sumld, nbdirs)
                    IF (l2 + 1 .GT. n) THEN
                      min32 = n
                    ELSE
                      min32 = l2 + 1
                    END IF
                    IF (l2 + 1 .GT. n) THEN
                      min68 = n
                    ELSE
                      min68 = l2 + 1
                    END IF
                    arg1 = n - l2
                    CALL DDOT_DV(arg1, c(k1, min32), cd(1, k1, min32),
     +                           ldc, b(l2, min68), bd(1, l2, min68),
     +                           ldb, sumr, sumrd, nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 1, 2) = cd(nd, k1, l2) - sumld(nd) - sgn*
     +                  sumrd(nd)
                    ENDDO
                    vec(1, 2) = c(k1, l2) - (suml+sgn*sumr)
                    IF (k2 + 1 .GT. m) THEN
                      min33 = m
                    ELSE
                      min33 = k2 + 1
                    END IF
                    IF (k2 + 1 .GT. m) THEN
                      min69 = m
                    ELSE
                      min69 = k2 + 1
                    END IF
C
                    arg1 = m - k2
                    CALL DDOT_DV(arg1, a(k2, min33), ad(1, k2, min33),
     +                           lda, c(min69, l1), cd(1, min69, l1), 1
     +                           , suml, sumld, nbdirs)
                    IF (l2 + 1 .GT. n) THEN
                      min34 = n
                    ELSE
                      min34 = l2 + 1
                    END IF
                    IF (l2 + 1 .GT. n) THEN
                      min70 = n
                    ELSE
                      min70 = l2 + 1
                    END IF
                    arg1 = n - l2
                    CALL DDOT_DV(arg1, c(k2, min34), cd(1, k2, min34),
     +                           ldc, b(l1, min70), bd(1, l1, min70),
     +                           ldb, sumr, sumrd, nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 2, 1) = cd(nd, k2, l1) - sumld(nd) - sgn*
     +                  sumrd(nd)
                    ENDDO
                    vec(2, 1) = c(k2, l1) - (suml+sgn*sumr)
                    IF (k2 + 1 .GT. m) THEN
                      min35 = m
                    ELSE
                      min35 = k2 + 1
                    END IF
                    IF (k2 + 1 .GT. m) THEN
                      min71 = m
                    ELSE
                      min71 = k2 + 1
                    END IF
C
                    arg1 = m - k2
                    CALL DDOT_DV(arg1, a(k2, min35), ad(1, k2, min35),
     +                           lda, c(min71, l2), cd(1, min71, l2), 1
     +                           , suml, sumld, nbdirs)
                    IF (l2 + 1 .GT. n) THEN
                      min36 = n
                    ELSE
                      min36 = l2 + 1
                    END IF
                    IF (l2 + 1 .GT. n) THEN
                      min72 = n
                    ELSE
                      min72 = l2 + 1
                    END IF
                    arg1 = n - l2
                    CALL DDOT_DV(arg1, c(k2, min36), cd(1, k2, min36),
     +                           ldc, b(l2, min72), bd(1, l2, min72),
     +                           ldb, sumr, sumrd, nbdirs)
                    DO nd=1,nbdirs
                      vecd(nd, 2, 2) = cd(nd, k2, l2) - sumld(nd) - sgn*
     +                  sumrd(nd)
                    ENDDO
                    vec(2, 2) = c(k2, l2) - (suml+sgn*sumr)
C
                    CALL DLASY2_DV(.false., .true., isgn, 2, 2, a(k1, k1
     +                             ), ad(1, k1, k1), lda, b(l1, l1), bd(
     +                             1, l1, l1), ldb, vec, vecd, 2, scaloc
     +                             , scalocd, x, xd, 2, xnorm, ierr,
     +                             nbdirs)
                    IF (ierr .NE. 0) info = 1
C
                    IF (scaloc .NE. one) THEN
                      DO j=1,n
                        CALL DSCAL_DV(m, scaloc, scalocd, c(1, j), cd(1
     +                                , 1, j), 1, nbdirs)
                      ENDDO
                      scale = scale*scaloc
                    END IF
                    DO nd=1,nbdirs
                      cd(nd, k1, l1) = xd(nd, 1, 1)
                      cd(nd, k1, l2) = xd(nd, 1, 2)
                      cd(nd, k2, l1) = xd(nd, 2, 1)
                      cd(nd, k2, l2) = xd(nd, 2, 2)
                    ENDDO
                    c(k1, l1) = x(1, 1)
                    c(k1, l2) = x(1, 2)
                    c(k2, l1) = x(2, 1)
                    c(k2, l2) = x(2, 2)
                  END IF
                END IF
              ENDDO
            END IF
          ENDDO
        END IF
C
C
C
        RETURN
      END IF
      END
