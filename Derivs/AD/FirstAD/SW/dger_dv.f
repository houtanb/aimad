!
! Copyright (C) 2006-2014 Houtan Bastani and Luca Guerrieri
!
!
! This free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! It is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with Dynare.  If not, see <http://www.gnu.org/licenses/>.
!

C        Generated by TAPENADE     (INRIA, Tropics team)
C  Tapenade - Version 2.2 (r1239) - Wed 28 Jun 2006 04:59:55 PM CEST
C
C  Differentiation of dger in forward (tangent) mode: (multi-directional mode)
C   variations  of output variables: a
C   with respect to input variables: alpha x y a
      SUBROUTINE DGER_DV(m, n, alpha, alphad, x, xd, incx, y, yd, incy,
     +                   a, ad, lda, nbdirs)

      USE DIFFSIZES

      IMPLICIT NONE
C
C     End of DGER  .
C
      INTEGER incx, incy, m, n
      INTEGER lda, nbdirs
      DOUBLE PRECISION a(lda, *), ad(nbdirsmax, lda, *), x(*), xd(
     +                 nbdirsmax, *), y(*), yd(nbdirsmax, *)
      DOUBLE PRECISION alpha, alphad(nbdirsmax)
      DOUBLE PRECISION zero
      PARAMETER (zero=0.0d+0)
      INTEGER i, info, ix, j, jy, kx, max1, nd
      DOUBLE PRECISION temp, tempd(nbdirsmax)
      INTRINSIC MAX
      EXTERNAL XERBLA
C     .. Scalar Arguments ..
C     ..
C     .. Array Arguments ..
C     ..
C
C  Purpose
C  =======
C
C  DGER   performs the rank 1 operation
C
C     A := alpha*x*y' + A,
C
C  where alpha is a scalar, x is an m element vector, y is an n element
C  vector and A is an m by n matrix.
C
C  Arguments
C  ==========
C
C  M      - INTEGER.
C           On entry, M specifies the number of rows of the matrix A.
C           M must be at least zero.
C           Unchanged on exit.
C
C  N      - INTEGER.
C           On entry, N specifies the number of columns of the matrix A.
C           N must be at least zero.
C           Unchanged on exit.
C
C  ALPHA  - DOUBLE PRECISION.
C           On entry, ALPHA specifies the scalar alpha.
C           Unchanged on exit.
C
C  X      - DOUBLE PRECISION array of dimension at least
C           ( 1 + ( m - 1 )*abs( INCX ) ).
C           Before entry, the incremented array X must contain the m
C           element vector x.
C           Unchanged on exit.
C
C  INCX   - INTEGER.
C           On entry, INCX specifies the increment for the elements of
C           X. INCX must not be zero.
C           Unchanged on exit.
C
C  Y      - DOUBLE PRECISION array of dimension at least
C           ( 1 + ( n - 1 )*abs( INCY ) ).
C           Before entry, the incremented array Y must contain the n
C           element vector y.
C           Unchanged on exit.
C
C  INCY   - INTEGER.
C           On entry, INCY specifies the increment for the elements of
C           Y. INCY must not be zero.
C           Unchanged on exit.
C
C  A      - DOUBLE PRECISION array of DIMENSION ( LDA, n ).
C           Before entry, the leading m by n part of the array A must
C           contain the matrix of coefficients. On exit, A is
C           overwritten by the updated matrix.
C
C  LDA    - INTEGER.
C           On entry, LDA specifies the first dimension of A as declared
C           in the calling (sub) program. LDA must be at least
C           max( 1, m ).
C           Unchanged on exit.
C
C
C  Level 2 Blas routine.
C
C  -- Written on 22-October-1986.
C     Jack Dongarra, Argonne National Lab.
C     Jeremy Du Croz, Nag Central Office.
C     Sven Hammarling, Nag Central Office.
C     Richard Hanson, Sandia National Labs.
C
C
C     .. Parameters ..
C     ..
C     .. Local Scalars ..
C     ..
C     .. External Subroutines ..
C     ..
C     .. Intrinsic Functions ..
C     ..
C
C     Test the input parameters.
C
      info = 0
      IF (m .LT. 0) THEN
        info = 1
      ELSE IF (n .LT. 0) THEN
        info = 2
      ELSE IF (incx .EQ. 0) THEN
        info = 5
      ELSE IF (incy .EQ. 0) THEN
        info = 7
      ELSE
        IF (1 .LT. m) THEN
          max1 = m
        ELSE
          max1 = 1
        END IF
        IF (lda .LT. max1) info = 9
      END IF
      IF (info .NE. 0) THEN
        CALL XERBLA('DGER  ', info)
        RETURN
      ELSE IF (m .EQ. 0 .OR. n .EQ. 0 .OR. alpha .EQ. zero) THEN
C
C     Quick return if possible.
C
        RETURN
      ELSE
C
C     Start the operations. In this version the elements of A are
C     accessed sequentially with one pass through A.
C
        IF (incy .GT. 0) THEN
          jy = 1
        ELSE
          jy = 1 - (n-1)*incy
        END IF
        IF (incx .EQ. 1) THEN
          DO j=1,n
            IF (y(jy) .NE. zero) THEN
              DO nd=1,nbdirs
                tempd(nd) = alphad(nd)*y(jy) + alpha*yd(nd, jy)
              ENDDO
              temp = alpha*y(jy)
              DO i=1,m
                DO nd=1,nbdirs
                  ad(nd, i, j) = ad(nd, i, j) + xd(nd, i)*temp + x(i)*
     +              tempd(nd)
                ENDDO
                a(i, j) = a(i, j) + x(i)*temp
              ENDDO
            END IF
            jy = jy + incy
          ENDDO
        ELSE
          IF (incx .GT. 0) THEN
            kx = 1
          ELSE
            kx = 1 - (m-1)*incx
          END IF
          DO j=1,n
            IF (y(jy) .NE. zero) THEN
              DO nd=1,nbdirs
                tempd(nd) = alphad(nd)*y(jy) + alpha*yd(nd, jy)
              ENDDO
              temp = alpha*y(jy)
              ix = kx
              DO i=1,m
                DO nd=1,nbdirs
                  ad(nd, i, j) = ad(nd, i, j) + xd(nd, ix)*temp + x(ix)*
     +              tempd(nd)
                ENDDO
                a(i, j) = a(i, j) + x(ix)*temp
                ix = ix + incx
              ENDDO
            END IF
            jy = jy + incy
          ENDDO
        END IF
C
        RETURN
      END IF
      END
