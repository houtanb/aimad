!
! Copyright (C) 2006-2014 Houtan Bastani and Luca Guerrieri
!
!
! This free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! It is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with Dynare.  If not, see <http://www.gnu.org/licenses/>.
!

C        Generated by TAPENADE     (INRIA, Tropics team)
C  Tapenade - Version 2.2 (r1239) - Wed 28 Jun 2006 04:59:55 PM CEST
C
C  Differentiation of dlange in forward (tangent) mode: (multi-directional mode)
C   variations  of output variables: dlange work
C   with respect to input variables: work a
      SUBROUTINE DLANGE_DV(norm, m, n, a, ad, lda, work, workd, dlange,
     +                     dlanged, nbdirs)
      USE DIFFSIZES
      IMPLICIT NONE
C
C     End of DLANGE
C
      INTEGER lda, nbdirs
      DOUBLE PRECISION a(lda, *), ad(nbdirsmax, lda, *), work(*), workd(
     +                 nbdirsmax, *)
      DOUBLE PRECISION dlange, dlanged(nbdirsmax)
      INTEGER m, n
      CHARACTER norm
      DOUBLE PRECISION one, zero
      PARAMETER (one=1.0d+0, zero=0.0d+0)
      DOUBLE PRECISION abs1, abs1d(nbdirsmax), abs2, abs2d(nbdirsmax)
      INTEGER i, j, min1, nd
      LOGICAL LSAME, result1, result2
      DOUBLE PRECISION result10, result10d(nbdirsmax), scale, scaled(
     +                 nbdirsmax), sum, sumd(nbdirsmax), value, valued(
     +                 nbdirsmax), y1, y1d(nbdirsmax)
      EXTERNAL LSAME
      INTRINSIC MAX, ABS, MIN, SQRT
      IF (m .GT. n) THEN
        min1 = n
      ELSE
        min1 = m
      END IF
C
C  -- LAPACK auxiliary routine (version 3.1) --
C     Univ. of Tennessee, Univ. of California Berkeley and NAG Ltd..
C     November 2006
C
C     .. Scalar Arguments ..
C     ..
C     .. Array Arguments ..
C     ..
C
C  Purpose
C  =======
C
C  DLANGE  returns the value of the one norm,  or the Frobenius norm, or
C  the  infinity norm,  or the  element of  largest absolute value  of a
C  real matrix A.
C
C  Description
C  ===========
C
C  DLANGE returns the value
C
C     DLANGE = ( max(abs(A(i,j))), NORM = 'M' or 'm'
C              (
C              ( norm1(A),         NORM = '1', 'O' or 'o'
C              (
C              ( normI(A),         NORM = 'I' or 'i'
C              (
C              ( normF(A),         NORM = 'F', 'f', 'E' or 'e'
C
C  where  norm1  denotes the  one norm of a matrix (maximum column sum),
C  normI  denotes the  infinity norm  of a matrix  (maximum row sum) and
C  normF  denotes the  Frobenius norm of a matrix (square root of sum of
C  squares).  Note that  max(abs(A(i,j)))  is not a consistent matrix norm.
C
C  Arguments
C  =========
C
C  NORM    (input) CHARACTER*1
C          Specifies the value to be returned in DLANGE as described
C          above.
C
C  M       (input) INTEGER
C          The number of rows of the matrix A.  M >= 0.  When M = 0,
C          DLANGE is set to zero.
C
C  N       (input) INTEGER
C          The number of columns of the matrix A.  N >= 0.  When N = 0,
C          DLANGE is set to zero.
C
C  A       (input) DOUBLE PRECISION array, dimension (LDA,N)
C          The m by n matrix A.
C
C  LDA     (input) INTEGER
C          The leading dimension of the array A.  LDA >= max(M,1).
C
C  WORK    (workspace) DOUBLE PRECISION array, dimension (MAX(1,LWORK)),
C          where LWORK >= M when NORM = 'I'; otherwise, WORK is not
C          referenced.
C
C =====================================================================
C
C     .. Parameters ..
C     ..
C     .. Local Scalars ..
C     ..
C     .. External Subroutines ..
C     ..
C     .. External Functions ..
C     ..
C     .. Intrinsic Functions ..
C     ..
C     .. Executable Statements ..
C
      IF (min1 .EQ. 0) THEN
        value = zero
        DO nd=1,nbdirs
          valued(nd) = 0.D0
        ENDDO
      ELSE
        result1 = LSAME(norm, 'M')
        IF (result1) THEN
C
C        Find max(abs(A(i,j))).
C
          value = zero
          DO nd=1,nbdirs
            valued(nd) = 0.D0
          ENDDO
          DO j=1,n
            DO i=1,m
              IF (a(i, j) .GE. 0.) THEN
                DO nd=1,nbdirs
                  y1d(nd) = ad(nd, i, j)
                ENDDO
                y1 = a(i, j)
              ELSE
                DO nd=1,nbdirs
                  y1d(nd) = -ad(nd, i, j)
                ENDDO
                y1 = -a(i, j)
              END IF
              IF (value .LT. y1) THEN
                DO nd=1,nbdirs
                  valued(nd) = y1d(nd)
                ENDDO
                value = y1
              ELSE
                value = value
              END IF
            ENDDO
          ENDDO
        ELSE
          result1 = LSAME(norm, 'O')
          IF (result1 .OR. norm .EQ. '1') THEN
C
C        Find norm1(A).
C
            value = zero
            DO nd=1,nbdirs
              valued(nd) = 0.D0
            ENDDO
            DO j=1,n
              sum = zero
              DO nd=1,nbdirs
                sumd(nd) = 0.D0
              ENDDO
              DO i=1,m
                IF (a(i, j) .GE. 0.) THEN
                  DO nd=1,nbdirs
                    abs1d(nd) = ad(nd, i, j)
                  ENDDO
                  abs1 = a(i, j)
                ELSE
                  DO nd=1,nbdirs
                    abs1d(nd) = -ad(nd, i, j)
                  ENDDO
                  abs1 = -a(i, j)
                END IF
                DO nd=1,nbdirs
                  sumd(nd) = sumd(nd) + abs1d(nd)
                ENDDO
                sum = sum + abs1
              ENDDO
              IF (value .LT. sum) THEN
                DO nd=1,nbdirs
                  valued(nd) = sumd(nd)
                ENDDO
                value = sum
              ELSE
                value = value
              END IF
            ENDDO
          ELSE
            result1 = LSAME(norm, 'I')
            IF (result1) THEN
C
C        Find normI(A).
C
              DO i=1,m
                DO nd=1,nbdirs
                  workd(nd, i) = 0.D0
                ENDDO
                work(i) = zero
              ENDDO
              DO j=1,n
                DO i=1,m
                  IF (a(i, j) .GE. 0.) THEN
                    DO nd=1,nbdirs
                      abs2d(nd) = ad(nd, i, j)
                    ENDDO
                    abs2 = a(i, j)
                  ELSE
                    DO nd=1,nbdirs
                      abs2d(nd) = -ad(nd, i, j)
                    ENDDO
                    abs2 = -a(i, j)
                  END IF
                  DO nd=1,nbdirs
                    workd(nd, i) = workd(nd, i) + abs2d(nd)
                  ENDDO
                  work(i) = work(i) + abs2
                ENDDO
              ENDDO
              value = zero
              DO nd=1,nbdirs
                valued(nd) = 0.D0
              ENDDO
              DO i=1,m
                IF (value .LT. work(i)) THEN
                  DO nd=1,nbdirs
                    valued(nd) = workd(nd, i)
                  ENDDO
                  value = work(i)
                ELSE
                  value = value
                END IF
              ENDDO
            ELSE
              result1 = LSAME(norm, 'F')
              result2 = LSAME(norm, 'E')
              IF (result1 .OR. result2) THEN
C
C        Find normF(A).
C
                scale = zero
                sum = one
                DO nd=1,nbdirs
                  sumd(nd) = 0.D0
                ENDDO
                DO nd=1,nbdirs
                  scaled(nd) = 0.D0
                ENDDO
                DO j=1,n
                  CALL DLASSQ_DV(m, a(1, j), ad(1, 1, j), 1, scale,
     +                           scaled, sum, sumd, nbdirs)
                ENDDO
                result10 = SQRT(sum)
                DO nd=1,nbdirs
                  IF (sumd(nd) .EQ. 0.0 .OR. sum .EQ. 0.0) THEN
                    result10d(nd) = 0.D0
                  ELSE
                    result10d(nd) = sumd(nd)/(2.0*SQRT(sum))
                  END IF
                  valued(nd) = scaled(nd)*result10 + scale*result10d(nd)
                ENDDO
                value = scale*result10
              ELSE
                DO nd=1,nbdirs
                  valued(nd) = 0.D0
                ENDDO
              END IF
            END IF
          END IF
        END IF
      END IF
      DO nd=1,nbdirs
        dlanged(nd) = valued(nd)
      ENDDO
C
      dlange = value
      RETURN
      END
